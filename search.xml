<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础之数组</title>
    <url>/2021/05/16/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="6、数组"><a href="#6、数组" class="headerlink" title="6、数组"></a>6、数组</h1><h2 id="6-1、数组的概述"><a href="#6-1、数组的概述" class="headerlink" title="6.1、数组的概述"></a>6.1、数组的概述</h2><p>数组(Array)：</p>
<ul>
<li><p>是多个<strong>相同类型数据</strong>按<strong>一定顺序排列</strong>的集合，并使用<strong>一个名字命名</strong>，并通过<strong>编号</strong>的方式对这些数据进行统一管理。<br>数组的常见概念：</p>
</li>
<li><p>数组名</p>
</li>
<li><p>下标(或索引)</p>
</li>
<li><p>元素</p>
</li>
<li><p>数组的长度：元素的个数</p>
</li>
</ul>
<p>数组的特点：</p>
<ul>
<li>数组是有序排列的</li>
<li>数组本身是<strong>引用数据类型</strong>，而数组中的元素可以是<strong>任何数据类型</strong>，包括基本数据类型和引用数据类型。</li>
<li>创建数组对象会在内存中开辟一整块<strong>连续的空间</strong>，而数组名中引用的是这块连续空间的首地址</li>
<li>数组的<strong>长度一旦确定，就不能修改。</strong></li>
</ul>
<p>我们可以直接通过下标（或索引）的方式调用指定位置的元素，速度很快。</p>
<p>数组的分类：</p>
<ul>
<li><p>按照维度：一维数组、二维数组、三维数组、……</p>
</li>
<li><p>按照元素的数据类型分：</p>
<ul>
<li>基本数据类型元素的数组</li>
<li>引用数据类型元素的数据（即对象数组）<h2 id="6-2、一维数组的使用"><a href="#6-2、一维数组的使用" class="headerlink" title="6.2、一维数组的使用"></a>6.2、一维数组的使用</h2></li>
</ul>
</li>
<li><p>一维数组的声明和初始化</p>
</li>
<li><p>如何调用数组的指定位置的元素</p>
</li>
<li><p>如何获取数组的长度</p>
</li>
<li><p>如何遍历数组</p>
</li>
<li><p>数组元素的默认初始化值</p>
</li>
<li><p>数组的内存解析</p>
</li>
</ul>
<p>1、一维数组的声明和初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<span class="hljs-comment">//一维数组的声明和初始化</span><br>		<span class="hljs-keyword">int</span> num;<span class="hljs-comment">//声明</span><br>		num = <span class="hljs-number">10</span>;<span class="hljs-comment">//初始化</span><br>		<br>		<span class="hljs-keyword">int</span> id = <span class="hljs-number">1001</span>;<span class="hljs-comment">//声明和初始化</span><br>		<br>		<br>		<span class="hljs-keyword">int</span>[] ids;<span class="hljs-comment">//声明	</span><br>		<span class="hljs-comment">//静态初始化:</span><br>		<span class="hljs-comment">//数组的初始化和数组元素的赋值操作同时进行</span><br>		ids = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>&#125;;<br>		<span class="hljs-comment">//动态初始化:</span><br>		<span class="hljs-comment">//数组的初始化和数组元素的赋值操作分开进行</span><br>		String[] names = <span class="hljs-keyword">new</span> String[<span class="hljs-number">6</span>];<br>	<br>	&#125;<br><br><br><span class="hljs-comment">//一些正确写法</span><br>		<span class="hljs-keyword">int</span>[] arr4 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//类型推断</span><br><span class="hljs-comment">//只有声明和赋值一行才可以类型推断</span><br></code></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>数组一旦初始化完成，其长度就确定了。</li>
</ul>
<p>2、如何调用数组的指定位置的元素</p>
<ul>
<li>通过角标的方式调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数组的角标(或索引)从0开始的，到数组的长度-1结束。</span><br>		<br>		names[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;魔神&quot;</span>;<br>		names[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;凯撒&quot;</span>;<br>		names[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;凯撒&quot;</span>;<br>		names[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;凯撒&quot;</span>;<br>		names[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;凯撒&quot;</span>;<br>		names[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;凯撒&quot;</span>;<br>		<span class="hljs-comment">//Ctrl+alt+↓   复制到下一行</span><br>		names[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;凯撒&quot;</span>;<span class="hljs-comment">//越界！Index 6 out of bounds for length 6</span><br>	<br></code></pre></td></tr></table></figure>



<p>3、如何获取数组的长度</p>
<p>属性：length</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(names.length);<br><br>System.out.println(ids.length);<br><br>结果：<br><span class="hljs-number">6</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>



<p>4、如何遍历数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">		System.out.println(names[0]); </span><br><span class="hljs-comment">		System.out.println(names[1]);</span><br><span class="hljs-comment">		Ctrl+/注释或者取消注释</span><br><span class="hljs-comment">		Ctrl+shift+/ 多行注释 </span><br><span class="hljs-comment">		Ctrl+shift+\ 取消多行注释 </span><br><span class="hljs-comment">		</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt;= names.length;i++) &#123;<br>			System.out.println(names[i]);<br>		&#125;<br></code></pre></td></tr></table></figure>





<p>5、数组元素的默认初始化值</p>
<ul>
<li>数组元素是整型： 0</li>
<li>数组元素是浮点型： 0.0</li>
<li>数组元素是char型：<em>ASCII</em> 中 0（null） 或者 ‘/u0000’, 而非‘0’</li>
<li>数组元素是boolean型：false</li>
<li>数组元素是引用数据类型：null</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>];<br>		<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; arr.length;i++) &#123;<br>			System.out.println(arr[i]);<br>		&#125;<br><br>结果：<br><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>







<p>6、数组的内存解析(简单理解)</p>
<p><img src="https://www.picbed.cn/images/2021/05/17/1.png"></p>
<p><img src="https://www.picbed.cn/images/2021/05/17/2.png"></p>
<h2 id="6-3、多维数组的使用"><a href="#6-3、多维数组的使用" class="headerlink" title="6.3、多维数组的使用"></a>6.3、多维数组的使用</h2><ul>
<li>Java语言里提供了支持多维数组的语法</li>
<li>如果说可以把一维数组当成几何中的线性图形，那么二维数组就相当于是一个表格。</li>
<li>对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在，其实，<strong>从数组底层的运行机制来看，其实没有多维数组。</strong></li>
</ul>
<p>二维数组的使用：</p>
<p>规定：二维数组分为外层数组的元素，内层数组的元素</p>
<ul>
<li>二维数组的声明和初始化</li>
<li>如何调用数组的指定位置的元素</li>
<li>如何获取数组的长度</li>
<li>如何遍历数组</li>
<li>数组元素的默认初始化值</li>
<li>数组的内存解析</li>
</ul>
<p>1、二维数组的声明和初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//一维数组</span><br>		<br>		<span class="hljs-comment">//1、二维数组的声明和初始化</span><br>		<span class="hljs-comment">//静态初始化</span><br>		<span class="hljs-keyword">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>		<span class="hljs-comment">//动态初始化1</span><br>		<span class="hljs-keyword">int</span>[][] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br>		<span class="hljs-comment">//动态初始化2</span><br>		<span class="hljs-keyword">int</span>[][] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][];<br>		<br>		<br>		<span class="hljs-comment">//一些正确写法</span><br>		<span class="hljs-keyword">int</span> arr4[][]  = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>		<span class="hljs-keyword">int</span>[] arr5[]  = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br></code></pre></td></tr></table></figure>

<p>2、如何调用数组的指定位置的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">		<br>		<span class="hljs-comment">//1、二维数组的声明和初始化</span><br>				<span class="hljs-comment">//静态初始化</span><br>				<span class="hljs-keyword">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>				<span class="hljs-comment">//动态初始化1</span><br>				String[][] arr2 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br>				<span class="hljs-comment">//动态初始化2</span><br>				String[][] arr3 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][];<br>		<span class="hljs-comment">//如何调用数组的指定位置的元素</span><br>		System.out.println(arr1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">//2</span><br>		<br>		System.out.println(arr2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">//null</span><br>		<br>		<br>		arr3[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> String[<span class="hljs-number">4</span>];<span class="hljs-comment">//没有这个就会出现java.lang.NullPointerException</span><br>		System.out.println(arr3[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br>  结果：<br>  <span class="hljs-number">2</span><br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br><br></code></pre></td></tr></table></figure>



<p>3、如何获取数组的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、二维数组的声明和初始化</span><br>				<span class="hljs-comment">//静态初始化</span><br>				<span class="hljs-keyword">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>				<span class="hljs-comment">//动态初始化1</span><br>				String[][] arr2 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br>				<span class="hljs-comment">//动态初始化2</span><br>				String[][] arr3 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][];<br>				<br>				<span class="hljs-keyword">int</span> arr4[][]  = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>				<span class="hljs-keyword">int</span>[] arr5[]  = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>		<span class="hljs-comment">//如何调用数组的指定位置的元素</span><br>		System.out.println(arr1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">//2</span><br>		<br>		System.out.println(arr2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">//null</span><br>		<br>		<br>		arr3[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> String[<span class="hljs-number">4</span>];<br>		System.out.println(arr3[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<span class="hljs-comment">//java.lang.NullPointerException</span><br>		<br>		<br><span class="hljs-comment">//获取长度！！！</span><br>		<br>		System.out.println(arr4.length);<br>		System.out.println(arr4[<span class="hljs-number">0</span>].length);<br></code></pre></td></tr></table></figure>



<p>4、如何遍历数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr4.length;i++) &#123;<br>			<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr4[i].length;j++) &#123;<br>				System.out.println(arr4[i][j]);<br>				<br>			&#125;<br>		&#125;<br></code></pre></td></tr></table></figure>

<p>5、数组元素的默认初始化值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>];<br>		<br>		System.out.println(arr);<br>		System.out.println(arr[<span class="hljs-number">0</span>]);<br>		System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>		<br><br>		<br><span class="hljs-comment">//结果</span><br>[[I@182decdb<span class="hljs-comment">//[[表示二维数组，I表示int型，@后面表示地址</span><br>[I@7637f22<br><span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">float</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>];<br>		<br><br>		System.out.println(arr[<span class="hljs-number">0</span>]);<br>		System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>结果：<br>[F@182decdb<br><span class="hljs-number">0.0</span><br>    <br>    <br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String[][] arr = <span class="hljs-keyword">new</span> String[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>];<br>		<br><br>		System.out.println(arr[<span class="hljs-number">0</span>]);<br>		System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><br><br>结果：<br>   [Ljava.lang.String;@182decdb<br><span class="hljs-keyword">null</span> <br></code></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">4</span>][];<br>		<br><br>System.out.println(arr[<span class="hljs-number">1</span>]);<span class="hljs-comment">//null  数组是引用数据类型</span><br>		System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<span class="hljs-comment">//空指针异常</span><br></code></pre></td></tr></table></figure>



<p>针对于初始化方式一：</p>
<p>比如：<code>int[][] arr = new int[4][3];</code></p>
<p>外层元素的初始化值为：地址值</p>
<p>内层元素的初始化值为：与一维数组初始化情况相同！</p>
<p>针对于初始化方式二：</p>
<p>比如：<code>int[][] arr = new int[4][];</code></p>
<p>外层元素的初始化值为：null</p>
<p>内层元素的初始化值为：不能调用！</p>
<p>6、数组的内存解析</p>
<p><img src="https://www.picbed.cn/images/2021/05/19/3.png"></p>
<h2 id="6-5、Arrays工具类的使用"><a href="#6-5、Arrays工具类的使用" class="headerlink" title="6.5、Arrays工具类的使用"></a>6.5、Arrays工具类的使用</h2><p>某个类后面加S 一般是这个类的工具类</p>
<p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组</p>
<ul>
<li>比如排序和搜索</li>
</ul>
<p>的各种方法。</p>
<table>
<thead>
<tr>
<th>boolean equals(int[] a,int[] b)</th>
<th>判断两个数组是否相等</th>
</tr>
</thead>
<tbody><tr>
<td>String toString(int[] a)</td>
<td>输出数组信息</td>
</tr>
<tr>
<td>void fill(int[] a,int val)</td>
<td>将指定值填充到数组之中</td>
</tr>
<tr>
<td>void sort(int[] a)</td>
<td>对数组进行排序</td>
</tr>
<tr>
<td>int binarySearch(int[] a,int key)</td>
<td>对排序后的数组进行二分法检索指定的值</td>
</tr>
</tbody></table>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">		 * java.util.Arrays:操作数组的工具类。</span><br><span class="hljs-comment">		 * 里面定义了很多操作数组的方法</span><br><span class="hljs-comment">		 * </span><br><span class="hljs-comment">		 */</span><br>	<span class="hljs-comment">//1、	boolean  equals(int[] a,int[] b)</span><br>			<span class="hljs-keyword">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>			<span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>			<br>			<br>			<br>			<span class="hljs-keyword">boolean</span> isEquals = Arrays.equals(arr1, arr2);<br>			System.out.println(isEquals);<br>			<span class="hljs-comment">//int[] arr1 = new int[]&#123;1,2,3,4&#125;;</span><br>			<span class="hljs-comment">//int[] arr2 = new int[]&#123;1,2,3,4&#125;;</span><br>			<span class="hljs-comment">//true</span><br>	<span class="hljs-comment">//2、   	String toString(int[] a)</span><br>			System.out.println(Arrays.toString(arr1));<br>			<span class="hljs-comment">//[1, 2, 3, 4]</span><br>    <span class="hljs-comment">//3、   void fill(int[] a,int val)      </span><br>			Arrays.fill(arr1, <span class="hljs-number">10</span>);<br>			System.out.println(Arrays.toString(arr1));<br>			<span class="hljs-comment">//[10, 10, 10, 10]</span><br>	<span class="hljs-comment">//4、	 void sort(int[] a)        </span><br>			Arrays.sort(arr2);<br>			System.out.println(Arrays.toString(arr2));<br>			<span class="hljs-comment">//[1, 2, 3, 4]</span><br>	<span class="hljs-comment">//5、	int binarySearch(int[] a,int key) </span><br>			<span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;-<span class="hljs-number">98</span>,-<span class="hljs-number">34</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">54</span>,<span class="hljs-number">66</span>,<span class="hljs-number">79</span>,<span class="hljs-number">105</span>,<span class="hljs-number">210</span>,<span class="hljs-number">333</span>&#125;;<br>			<span class="hljs-keyword">int</span> index = Arrays.binarySearch(arr, <span class="hljs-number">210</span>);<br>			System.out.println(index);<span class="hljs-comment">//负数就是没找到！</span><br><br><br>结果：<br>    <span class="hljs-keyword">false</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>[<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-number">8</span><br><br></code></pre></td></tr></table></figure>

<h2 id="6-6、数组使用中的常见异常"><a href="#6-6、数组使用中的常见异常" class="headerlink" title="6.6、数组使用中的常见异常"></a>6.6、数组使用中的常见异常</h2><p>数组中常见异常：</p>
<p>1、数组角标越界的异常：(左右都有越界)</p>
<ul>
<li>ArrayIndexOutOfBoundsException</li>
</ul>
<p>2、空指针异常：</p>
<ul>
<li>NullPointerException</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//情况1</span><br>	<span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>	arr=<span class="hljs-keyword">null</span>;<br>	System.out.println(arr[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure>

<p>本指向数组，赋值为null,无指向，则为空指针！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//情况2</span><br>	<span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>][];<br>		System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//情况2</span><br>String[] arr = <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-string">&quot;CC&quot;</span>&#125;;<br>		System.out.println(arr[<span class="hljs-number">0</span>].toString());<br><span class="hljs-comment">//输出AA</span><br>String[] arr = <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-string">&quot;CC&quot;</span>&#125;;<br>		arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">null</span>;<br>		System.out.println(arr[<span class="hljs-number">0</span>].toString());<br><span class="hljs-comment">//此时空指针异常</span><br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2021/05/14/Vue/</url>
    <content><![CDATA[<h1 id="Vue学习篇"><a href="#Vue学习篇" class="headerlink" title="Vue学习篇"></a>Vue学习篇</h1><h2 id="1、前端梳理"><a href="#1、前端梳理" class="headerlink" title="1、前端梳理"></a>1、前端梳理</h2><p>什么是Vue?</p>
<ul>
<li>Vue.js 是一套构建用户界面的渐进式框架。</li>
<li>Vue 只关注视图层， 采用自底向上增量开发的设计。</li>
<li>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件</li>
</ul>
<p>Soc关注点分离（Separation of concerns，SOC）</p>
<p>前端三要素：HTML+CSS+JS:<br>视图：给用户看，刷新后台给的数据<br>网络通信： axios<br>页面跳转： vue-router<br>状态管理： vuex<br>Vue-UI: icework    <a href="https://ice.work/">https://ice.work/</a></p>
<p>什么是CSS预处理器？</p>
<p>CSS预处理器是用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件，以供项目使用。<br>SCSS其语法完全兼容CSS3，并且继承了SCSS的强大功能。由于SCSS是CSS的扩展，因此所有在CSS中正常工作的代码也能在SCSS中正常工作。比CSS多出好多功能如变量、嵌套、混合(Mixin)、继承等。<br>发展至今，CSS预处理器的技术已经相当成熟，也涌现出了很多中不同的CSS预处理器语言。目前主流的有三种：Sass(Scss), Less, Stylus，用一种专门的编程语言，进行web页面样式设计，再通过编译器转化为正常的CSS文件，以供项目使用。</p>
<p>常用的CSS预处理器：</p>
<p>SASS 基于Ruby</p>
<p>LESS 基于NodeJS（简单，建议使用）</p>
<p>LESS中文网：<a href="http://lesscss.cn/">http://lesscss.cn/</a></p>
<p>JavaScript框架：</p>
<p>主要的前端框架：</p>
<p>Vue.js</p>
<p>jQuery:<br>        简化了DOM操作，但是DOM操作太频繁，影 响前端性能，在前端眼里只是为了兼容IE6,7,8而使用它。</p>
<p>Angular:<br>        MVC（模型视图控制器）搬到了前端</p>
<p>view:<code> jsp&#123;&#123;&#125;&#125;</code><br>        DATA:<br>        mvvm:</p>
<p>MVVM(异步通信为主): Model、View、ViewModel</p>
<p>什么是MVVM：</p>
<p>​    是一种软件架构设计模式。</p>
<p>​        vm：数据双向绑定</p>
<p>React：</p>
<p>提出虚拟DOM：利用内存</p>
<p>计算属性–&gt;Vue特色</p>
<p>Vue:<br>集大成<br>渐进式JavaScript框架<br>支持MVVM+虚拟Dom</p>
<p>Axios:<br>​前端通信框架<br>​Vue边界很明确，就是为了处理DOM，所以不具备通信能力，此时需要额外使用一个通信框架与服务器交互    </p>
<p>也可以使用jQuery提供的AJAX通信功能。        </p>
<p>UI框架：<br>​Ant-Design: 阿里巴巴出品<br>ElementUI iview ice:饿了么出品，基于Vue的UI框架</p>
<p>Bootstrap: Twitter<br>AmazeUI: HTML跨屏前端框架</p>
<p>JavaScript构建工具</p>
<ul>
<li><p>Babel:  JS编译工具，主要用于浏览器不支持ES新特性，比如用于编译TypeScript</p>
</li>
<li><p>WebPack: 模块打包器，主要用于打包，压缩，合并及按序加载</p>
<p>webpack打包<br>let–&gt; var<br>TypeScript 微软标准</p>
</li>
</ul>
<p>三端统一:</p>
<p>混合开发        （Hybrid App）</p>
<p>云打包： HBuild–&gt;HBuildX , DCloud出品：API Cloud</p>
<p>本地打包： Cordova(前身是PhoneGap)</p>
<p>微信小程序</p>
<p>方便微信小程序UI开发的框架: WeUI</p>
<p>后端技术：NodeJS</p>
<p>Express: NodeJS框架</p>
<p>Koa: Express简化版</p>
<p>NPM： 项目综合管理工具，类似于Maven</p>
<p>YARN:  NPM的替代方案，类似于Maven和Gradle的关系。</p>
<p>Vue的UI库</p>
<p>iView(移动端支持较多)</p>
<p>iView 是一套基于 Vue.js 的开源 UI 组件库，主要服务于 PC 界面的中后台产品。</p>
<ul>
<li>高质量、功能丰富</li>
<li>友好的 API ，自由灵活地使用空间</li>
<li>细致、漂亮的 UI</li>
<li>事无巨细的文档</li>
<li>可自定义主题<ul>
<li>主页：<a href="https://iview.github.io/">https://iview.github.io/</a></li>
</ul>
</li>
</ul>
<p>ElementUI(桌面端支持较多)</p>
<p>​    vue-element-admin</p>
<p>​    <a href="https://panjiachen.github.io/vue-element-admin-site/zh/">https://panjiachen.github.io/vue-element-admin-site/zh/</a></p>
<p>ICE</p>
<p>VantUI</p>
<p>AtUI</p>
<p>CubeUI</p>
<p>混合开发</p>
<p>Flutter</p>
<p>​    谷歌的移动端UI框架</p>
<p>Lonic</p>
<p>微信小程序</p>
<p>mpvue</p>
<p>WeUI</p>
<p>了解前后端分离的演变史</p>
<p>​    后端为主的MVC时代</p>
<p>​    基于AJAX带来的SPA时代</p>
<p>​    </p>
<p>​    大前端时代：后端：轻松</p>
<p>前端为主的MV*时代</p>
<p>MV*模式：</p>
<p>​    MVC（同步通信为主）：Model、View、Controller</p>
<p>​    MVP（异步通信为主）：Model、View、Presenter</p>
<p>​    MVVM(异步通信为主): Model、View、ViewModel</p>
<p>优点：</p>
<p>​        前后端职责很清晰</p>
<p>​    前端开发的复杂度可控</p>
<p>​    部署相对独立</p>
<p>缺点：</p>
<p>​    代码不能复用</p>
<p>全异步，对SEO不利</p>
<p>性能并非最佳</p>
<p>SPA不能满足所有需求，依旧存在大量的页面应用</p>
<p>URL Design需要后端配合，前端无法完全掌控</p>
<p>NodeJS带来的全栈模式</p>
<p>挑战：</p>
<p>​    需要前端对服务端编程有更进一步的认识，比如TCP/IP等网络知识的掌握</p>
<p>NodeJS层与Java曾高效通信</p>
<p>ViewModel能观察到数据的变化，并对视图对应的内容进行更新</p>
<p>ViewModel能够监听到视图的变化，并能够通知数据发生变化</p>
<p>Vue.js就是MVVM的实现者，他的核心就是实现了DOM监听与数据绑定</p>
<p>IDEA: 插件</p>
<h2 id="2、MVVM"><a href="#2、MVVM" class="headerlink" title="2、MVVM"></a>2、MVVM</h2><p>mvvm和MVC模式一样，主要目的是分离视图和模型</p>
<p>低耦合</p>
<p>可复用</p>
<p>独立开发</p>
<p>可测试</p>
<p>ViewModel所封装出来的数据模型包括视图的状态和行为两部分，而Model层的数据模型是只包含状态的.</p>
<p>视图状态和行为都封装在了ViewModel里，这样的封装使得ViewModel可以完整的去描述View层，由于实现双向绑定，ViewModel的内容会实时的展现在View层。</p>
<p>完全解耦View层和Model层，这个解耦是至关重要的，前后端分离方案实施的重要一环。</p>
<h2 id="Vue计算属性"><a href="#Vue计算属性" class="headerlink" title="Vue计算属性"></a>Vue计算属性</h2><p>什么是计算属性？</p>
<p>计算属性的重点突出在<strong>属性</strong>两个字上（属性是名词），首先，它是个<strong>属性</strong>，其次，这个属性有<strong>计算</strong>的能力（计算是动词），这里的计算就是个函数，简单点说，它就是一个能够将计算结果缓冲起来的属性（将行为转化成为静态的属性），</p>
<p>仅此而已：可以想象为缓存！</p>
<p>计算属性：计算出来的结果，保存在属性中，内存中运行：虚拟Dom</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=Vue, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue导入<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- view层 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Now:&#123;&#123;currentTime1()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Now:&#123;&#123;currentTime2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,<span class="hljs-comment">//元素</span></span><br><span class="javascript">        <span class="hljs-comment">//Model :数据</span></span><br>        data:&#123;<br><span class="javascript">            message: <span class="hljs-string">&quot;hello,kuangshen&quot;</span></span><br>        &#125;,<br>        methods: &#123;<br><span class="javascript">            currentTime1: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now();<span class="hljs-comment">//返回一个时间戳</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        computed: &#123;<span class="hljs-comment">//计算属性 methods, computed不建议方法重名</span></span><br><span class="javascript">            <span class="hljs-comment">//重名只会调用methods中的方法</span></span><br><span class="javascript">            currentTime2: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now();<span class="hljs-comment">//返回一个时间戳</span></span><br>            &#125;<br>        &#125;<br>    &#125;);<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>不刷新里面的数据，就不会更改</p>
<p>结论：</p>
<p>调用方法时，每次都需要计算，既然有计算过程则必定产生系统开销，那如果这个结果时不经过变化的呢？ 此时就可以考虑将这个结果缓存下来，采用计算属性可以很方便的做到这一点，计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销。</p>
<h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=Vue, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue插槽<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- view层 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">todo</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">todo-title</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;todo-title&quot;</span><span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-title</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">todo-items</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;todo-items&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in todoItems&quot;</span><span class="hljs-attr">:item</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-items</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">todo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//slot:插槽</span></span><br><span class="javascript">    Vue.component(<span class="hljs-string">&quot;todo&quot;</span>,&#123;</span><br><span class="handlebars"><span class="xml">        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;todo-title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;todo-items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;</span></span><br>    &#125;);<br><span class="javascript">    Vue.component(<span class="hljs-string">&quot;todo-title&quot;</span>,&#123;</span><br><span class="javascript">        props:[<span class="hljs-string">&#x27;title&#x27;</span>],</span><br><span class="handlebars"><span class="xml">        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;</span></span><br>    &#125;);<br><span class="javascript">    Vue.component(<span class="hljs-string">&quot;todo-items&quot;</span>,&#123;</span><br><span class="javascript">        props:[<span class="hljs-string">&#x27;item&#x27;</span>],</span><br><span class="handlebars"><span class="xml">        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>&#x27;</span></span><br>    &#125;);<br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,<span class="hljs-comment">//元素</span></span><br><span class="javascript">        <span class="hljs-comment">//Model :数据</span></span><br>        data:&#123;<br><span class="javascript">            title: <span class="hljs-string">&quot;秦老师列表&quot;</span>,</span><br><span class="javascript">            todoItems: [<span class="hljs-string">&#x27;狂神说Java&#x27;</span>,<span class="hljs-string">&#x27;狂神说前端&#x27;</span>]</span><br>        &#125;,<br>        <br>    &#125;);<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>





<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p><img src="https://www.picbed.cn/images/2021/05/17/vue7.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue自定义事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- view层 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">todo</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">todo-title</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;todo-title&quot;</span><span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-title</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">todo-items</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;todo-items&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in todoItems&quot;</span><span class="hljs-attr">:item</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-bind:index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">v-on:remove</span>=<span class="hljs-string">&quot;removeItems(index)&quot;</span><span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-items</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">todo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//slot:插槽</span></span><br><span class="javascript">    Vue.component(<span class="hljs-string">&quot;todo&quot;</span>,&#123;</span><br><span class="handlebars"><span class="xml">        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;todo-title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;todo-items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\</span></span><br><span class="handlebars"><span class="xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;</span></span><br>    &#125;);<br><span class="javascript">    Vue.component(<span class="hljs-string">&quot;todo-title&quot;</span>,&#123;</span><br><span class="javascript">        props:[<span class="hljs-string">&#x27;title&#x27;</span>],</span><br><span class="handlebars"><span class="xml">        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;</span></span><br>    &#125;);<br><span class="javascript">    Vue.component(<span class="hljs-string">&quot;todo-items&quot;</span>,&#123;</span><br><span class="javascript">        props:[<span class="hljs-string">&#x27;item&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>],</span><br><span class="javascript">        <span class="hljs-comment">//只能绑定当前组件的方法</span></span><br><span class="handlebars"><span class="xml">        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">index</span>&#125;&#125;</span><span class="xml">---</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;remove&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>&#x27;,</span></span><br>        methods: &#123;<br><span class="javascript">            remove:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">//自定义事件分发this.$emit</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;remove&#x27;</span>,index);</span><br>            &#125;<br>        &#125;<br>    &#125;);<br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,<span class="hljs-comment">//元素</span></span><br><span class="javascript">        <span class="hljs-comment">//Model :数据</span></span><br>        data:&#123;<br><span class="javascript">            title: <span class="hljs-string">&quot;秦老师列表&quot;</span>,</span><br><span class="javascript">            todoItems: [<span class="hljs-string">&#x27;狂神说Java&#x27;</span>,<span class="hljs-string">&#x27;狂神说前端&#x27;</span>]</span><br>        &#125;,<br>        methods: &#123;<br><span class="javascript">            removeItems:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.todoItems.splice(index,<span class="hljs-number">1</span>);</span><br>            &#125;<br>        &#125;<br>    &#125;);<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="Vue入门小结"><a href="#Vue入门小结" class="headerlink" title="Vue入门小结"></a>Vue入门小结</h2><p>核心：数据驱动，组件化</p>
<p>优点：</p>
<p>借鉴了AngulaJS的模块化开发 和 React的虚拟Dom虚拟Dom就是把Dom操作放到内存中执行：</p>
<p>常用的属性：</p>
<p>v-if</p>
<p>v-else-if</p>
<p>v-else</p>
<p>v-for</p>
<p>v-on 绑定事件，简写@</p>
<p>v-model 数据双向绑定</p>
<p>v-bind 给组件绑定参数。简写<strong>：</strong></p>
<p>组件化：</p>
<p>组合组件slot插槽</p>
<p>组件内部绑定事件需要使用到 this.$emit(“事件名”，“参数”)；</p>
<p>计算属性的特色，缓存计算数据</p>
<p>遵循SoC关注度分离原则，Vue是纯粹的视图框架，并不包含，比如Ajax之类的通信功能，为了解决通信问题，我们需要使用Axios框架做异步通信</p>
<p>说明：</p>
<p>Vue的开发都是要基于NodeJS,实际开发采用vue-cil脚手架开发，vue-router路由，vuex做状态管理；Vue UI界面我们一般使用ElementUI(饿了么出品)，或者ICE（阿里巴巴出品）来快速搭建前端项目。</p>
<h2 id="第一个vue-cli程序"><a href="#第一个vue-cli程序" class="headerlink" title="第一个vue-cli程序"></a>第一个vue-cli程序</h2><p>安装NodeJS</p>
<p>cmd下输入 <strong>node -v</strong>,<strong>npm -v</strong>查看是否能够打印出版本号即可！</p>
<p>安装Node.js 淘宝镜像加速器（cnpm）</p>
<blockquote>
<p>-g 就是全局安装</p>
</blockquote>
<p>npm install cnpm -g</p>
<p>cnpm install vue-cli -g</p>
<blockquote>
<p>测试是否安装成功</p>
<p>查看可以基于哪些模板创建vue应用程序，通过我们选择webpack</p>
<p>vue list</p>
</blockquote>
<p>创建我们的项目目录</p>
<p>创建一个基于webpack模板的vue应用程序</p>
<blockquote>
<p>这里的myvue是项目名称，可以根据自己的需求起名</p>
<p>vue init webpack myvue</p>
</blockquote>
<p>vue build选择第一个即可</p>
<p>一路选no即可</p>
<p>不自动执行npm install命令</p>
<blockquote>
<p> 初始化并运行：</p>
</blockquote>
<p>我们自己进入文件夹。进行npm install命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd myvue<br>npm install<br>npm run dev<br></code></pre></td></tr></table></figure>







<h2 id="WebPack学习"><a href="#WebPack学习" class="headerlink" title="WebPack学习"></a>WebPack学习</h2><p><a href="https://webpack.docschina.org/">webpack官网</a></p>
<p>本质上，<strong>webpack</strong> 是一个用于现代 JavaScript 应用程序的 <em>静态模块打包工具</em>。当 webpack 处理应用程序时，它会在内部构建一个 <a href="https://webpack.docschina.org/concepts/dependency-graph/">依赖图(dependency graph)</a>，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 <em>bundle</em>。</p>
<blockquote>
<p>安装Webpack</p>
</blockquote>
<p>WebPack是一款模块加载器兼打包工具，它能把各种资源，如JS,JSX,ES6,SASS,LESS,图片等都作为模块来处理和使用。</p>
<p>安装：</p>
<p><code>npm install webpack -g</code></p>
<p><code>npm install webpack-cil -g</code></p>
<p>测试：</p>
<p><code>webpack -v</code></p>
<p><code>webpack -cil -v</code></p>
<p>配置：</p>
<p>创建<strong>webpack.config.js</strong>配置文件</p>
<ul>
<li>entry： 入口文件，指定WebPack用哪个文件作为项目的入口</li>
<li>output: 输出，指定WebPack把处理完成的文件放置到指定路径</li>
<li>module: 模块，用于处理各种类型的文件</li>
<li>plugins: 插件，如：热更新、代码重用等。</li>
<li>resolve: 设置路径指向</li>
<li>watch: 监听，用于设置文件改动后直接打包</li>
</ul>
<blockquote>
<p>使用webpack</p>
</blockquote>
<p>1.创建项目</p>
<p>2.创建一个名为modules的目录，用于放置JS模块等资源文件</p>
<p>3.在modules下创建模块文件，如hello.js，用于编写JS模块相关代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//暴露一个方法</span><br><span class="hljs-built_in">exports</span>.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;h1&gt;狂神说ES6&lt;/h1&gt;&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>



<p>4.在modules下创建一个名为main.js的入口文件，用于打包时设置entry属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hello = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./hello&quot;</span>);<br>hello.sayHi();<br></code></pre></td></tr></table></figure>



<p>5.在项目目录下创建webpack.config,js配置文件，使用webpack命令打包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    entry: <span class="hljs-string">&#x27;./modules/main.js&#x27;</span>,<br>    output: &#123;<br>        filename: <span class="hljs-string">&quot;./js/bundle.js&quot;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>控制台使用：<strong>webpack命令打包</strong></p>
<p>生成dist文件夹，在里面生成bundle.js文件</p>
<p>前端即可该文件调用</p>
<p>说明：</p>
<p>#参数 –watch 用于监听变化</p>
<p>webpack –watch</p>
<h2 id="vue-router路由"><a href="#vue-router路由" class="headerlink" title="vue-router路由"></a>vue-router路由</h2><blockquote>
<p> 说明：</p>
</blockquote>
<p>学习的时候，尽量的打开官方的文档</p>
<p>Vue Router是Vue.js官方的路由管理器。它和Vue.js的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p>
<ul>
<li>嵌套的路由/视图表</li>
<li>模块化的、基于组件的路由配置</li>
<li>路由参数、查询、通配符</li>
<li>基于Vue.js过渡系统的视图过渡效果</li>
<li>细粒度的导航控制</li>
<li>带有自动激活的CSS class的链接</li>
<li>HTML5历史模式或hash模式，在IE9中自动降级</li>
<li>自定义的滚动条行为</li>
</ul>
<p>安装：</p>
<p>基于第一个<strong>vue-cli</strong>进行测试学习；先查看node_modules中是否存在vue-router</p>
<p>vue-router是一个插件包，需要npm/cnpm来进行安装，</p>
<p>输入</p>
<p><code>npm install vue-router --save-dev</code></p>
<p>如果在一个模块化工程中使用它，必须要通过Vue.use()明确地安装路由功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs vue">import Vue from &#39;vue&#39;<br>import VueRouter from &#39;vue-router&#39;<br><br>Vue.use(VueRouter);<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>学习基础篇</title>
    <url>/2021/04/29/%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="学习基础"><a href="#学习基础" class="headerlink" title="学习基础"></a>学习基础</h1><h2 id="1-1、计算机"><a href="#1-1、计算机" class="headerlink" title="1.1、计算机"></a>1.1、计算机</h2><p>包括硬件(hardware)和软件(software)两部分</p>
<ul>
<li>程序设计</li>
<li>程序设计语言</li>
</ul>
<h2 id="1-2、IT三大定律"><a href="#1-2、IT三大定律" class="headerlink" title="1.2、IT三大定律"></a>1.2、IT三大定律</h2><p>摩尔定律 （每一美元能买到的电脑性能，将每隔18-24个月翻一倍以上）<br>安迪-比尔定律 （描述了硬件厂商和软件产商之间的关系，即比尔要拿走安迪所给的）<br>反摩尔定律（逼着所有的硬件设备公司必须赶上摩尔定律所规定的更新速度，而所有的硬件和设备生产厂活都是非常辛苦的）</p>
<h2 id="1-3、计算机硬件介绍"><a href="#1-3、计算机硬件介绍" class="headerlink" title="1.3、计算机硬件介绍"></a>1.3、计算机硬件介绍</h2><p><img  src="https://www.picbed.cn/images/2021/04/30/1177fb129eae14766.png"  ><span class="image-caption">硬件</span></p>
<p>冯·<a href="https://baike.baidu.com/item/%E8%AF%BA%E4%BC%8A%E6%9B%BC">诺伊曼</a>体系结构是现代计算机的基础，现在大多计算机仍是冯·诺伊曼计算机的组织结构，只是作了一些改进而已，并没有从根本上突破冯体系结构的束缚。冯·诺伊曼也因此被人们称为“计算机之父”。</p>
<p><img  src="https://www.picbed.cn/images/2021/04/30/2bcbf108472717026.png"  ><span class="image-caption">冯诺依曼体系结构</span></p>
<h3 id="1-3-1、中央处理器"><a href="#1-3-1、中央处理器" class="headerlink" title="1.3.1、中央处理器"></a>1.3.1、中央处理器</h3><p><strong>中央处理器</strong>（central processing unit，简称CPU）作为计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元。从内存中中获取指令，然后执行这些指令。</p>
<ul>
<li><p>包括：控制单元和算术/逻辑单元。</p>
</li>
<li><p>每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间内执行的指令就越多。速度的计量单位是赫兹（Hz），1Hz相当于每秒1个脉冲。随着CPU速度的不断提高，目前以千兆（GHz）来表达。</p>
<p>1khz=1024hz 1mhz=1024khz 1Ghz=1024mhz</p>
</li>
<li><p>最初一个CPU只有一个核（core）。核是处理器中实现指令读取和执行的部分。一个多核CPU是一个具有两个或更多独立核的组件，可提高CPU的处理能力。现在的CPU都是构建在一块小小的硅半导体上，这块芯片上包含数百万称为晶体管的小电路开关上，用于处理信息。</p>
</li>
</ul>
<h3 id="1-3-2、输入输出设备"><a href="#1-3-2、输入输出设备" class="headerlink" title="1.3.2、输入输出设备"></a>1.3.2、输入输出设备</h3><ul>
<li>输入输出设备（IO设备），是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/8227413">数据处理系统</a>的关键外部设备之一，可以和计算机本体进行交互使用。</li>
<li>屏幕分辨率是指纵横向上的像素点数，单位是px。屏幕分辨率确定<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>屏幕上显示多少信息的设置，以水平和垂直像素来衡量。就相同大小的屏幕而言，当屏幕分辨率低时（例如 640 x 480），在屏幕上显示的<a href="https://baike.baidu.com/item/%E5%83%8F%E7%B4%A0/95084">像素</a>少，单个像素尺寸比较大。屏幕分辨率高时（例如 1600 x 1200），在屏幕上显示的像素多，单个像素尺寸比较小。</li>
<li>显示分辨率就是屏幕上显示的像素个数，分辨率160×128的意思是水平方向含有像素数为160个，垂直方向像素数128个。屏幕尺寸一样的情况下，分辨率越高，显示效果就越精细和细腻。</li>
<li>屏幕的清晰程度其实是分辨率和尺寸大小共同决定，用ppi指数衡量屏幕清晰程度更加准确。</li>
</ul>
<h3 id="1-3-3、存储设备"><a href="#1-3-3、存储设备" class="headerlink" title="1.3.3、存储设备"></a>1.3.3、存储设备</h3><ul>
<li><p>存储设备——内存中的信息在断电时会丢失。所以我们将程序和数据永久的保存在存储设备上，当计算机需要这些数据时再移入内存，因为从内存中读取比从存储设备中读取要快得多</p>
</li>
<li><p>存储设备主要有以下三种：磁盘驱动器、光盘驱动器（CD、DVD）、USB闪存驱动器<br>每台计算机至少有一个硬盘驱动器，硬盘（hard disk）用于永久的保存数据和程序。<br>USB：universal serial bus，通用串行总线<br>可以用USB将打印机、数码相机、鼠标、外部硬盘驱动器连接到计算机上；USB闪存驱动器很小，可用于存储和传输数据的设备。</p>
</li>
<li><p>内存——random-access memory，RAM<br>由一个有序的字节序列组成，用于存储程序及程序所需要的数据。</p>
</li>
<li><p>计算机就是一系列的电路开关。每个开关存在两种状态：关（off）和开（on）。如果电路是开的，它的值是1；如果电路是关的，它的值是0。<br>一个0或者一个1存储为1个比特（bit），是计算机中最小的存储单位。<br>计算机中最基本的存储单元是字节（bite）。每个字节由8个比特构成。<br>一个程序和它的数据在被CPU执行前必须移到计算机的内存中。<br>每个字节都有一个唯一的地址。使用这个地址确定字节的位置，以便于存储和获取数据。</p>
</li>
<li><p>一个计算机具有的RAM越多，它的运行速度越快，但是此规律是有限制的。</p>
</li>
<li><p>内存与CPU一样，也构建在表面嵌有数百万晶体管的硅半导体芯片上。但内存芯片更简单、更低速、更便宜。<br>但内存是带电存储的（一旦断电数据就会消失），而且容量有限，所以要长时间存储程序或数据就要使用硬盘。</p>
</li>
</ul>
<h2 id="1-4、操作系统"><a href="#1-4、操作系统" class="headerlink" title="1.4、操作系统"></a>1.4、操作系统</h2><p>操作系统（operation system，简称OS）是管理<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/5459592">计算机硬件</a>与<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>资源的<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F/3220205">计算机程序</a>。操作系统需要处理如管理与配置<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>、决定<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90/974435">系统资源</a>供需的优先次序、控制<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/10823368">输入设备</a>与<a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/10823333">输出设备</a>、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p>
<p><img src="https://www.picbed.cn/images/2021/04/30/3.png"></p>
<p>操作系统的主要任务：</p>
<ul>
<li>控制和监视系统的活动</li>
<li>分配和调配系统资源</li>
<li>调度操作</li>
</ul>
<h2 id="1-4、-万维网"><a href="#1-4、-万维网" class="headerlink" title="1.4、 万维网"></a>1.4、 万维网</h2><p>万维网WWW是World Wide Web的简称，也称为Web、3W等。WWW是基于<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E6%9C%BA/5168153">客户机</a>/<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>方式的信息发现技术和<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC/2832422">超文本</a>技术的综合。WWW服务器通过超文本标记语言(HTML)把<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF/111163">信息</a>组织成为图文并茂的超文本，利用链接从一个站点跳到另个站点。这样一来彻底摆脱了以前查询工具只能按特定路径一步步地查找信息的限制</p>
<p>万维网（world wide web，www，环球信息网）常简称为web，发明者为蒂姆伯纳斯李。<br>分为web客户端和web服务器程序。www可以让web客户端（常用浏览器）访问浏览web服务器上的页面。是一个由许多互相链接的超文本组成的系统，通过互联网访问。在这个系统中，每个有用的事物，称为一样“资源”；并且由一个全局“统一资源标识符”（URI）标识。</p>
<p><code>HTTP</code>协议(超文本传输协议HyperText Transfer Protocol)，它是基于TCP协议的应用层传输协议，简单来说就是客户端和服务端进行数据传输的一种规则。</p>
<p>B/S: browser浏览器 server </p>
<p>C/S: client客户端 server </p>
<h2 id="1-5、职业发展与提升"><a href="#1-5、职业发展与提升" class="headerlink" title="1.5、职业发展与提升"></a>1.5、职业发展与提升</h2><p>可以一直工作</p>
<p><img  src="https://www.picbed.cn/images/2021/04/30/4.png"  ><span class="image-caption">职业路线</span></p>
<p><a href="https://www.cnblogs.com/coderland/p/5903051.html">来自程序员跳槽全攻略读书笔记</a></p>
<p><img src="https://www.picbed.cn/images/2021/04/30/e5aef839cabcf80a340369a7fae1084e.png"></p>
<p>3e人才发展模型 education  exposure   experience</p>
<h2 id="1-6、学习经验探讨"><a href="#1-6、学习经验探讨" class="headerlink" title="1.6、学习经验探讨"></a>1.6、学习经验探讨</h2><p>看得懂不等于会敲</p>
<p>锻炼“双核处理”，<strong>边听讲思考，边做”笔记”</strong></p>
<p>纸上得来终觉浅，绝知此事要躬行！</p>
<ul>
<li>第一层次：看得懂（依赖于视频、书、帖子）</li>
<li>第二层次：练的熟（每天代码必须实现2-3遍）</li>
<li>总结：三分看，七分练</li>
</ul>
]]></content>
      <categories>
        <category>学习基础</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础篇01</title>
    <url>/2021/04/29/Java%E5%9F%BA%E7%A1%8001/</url>
    <content><![CDATA[<h1 id="Java基础01"><a href="#Java基础01" class="headerlink" title="Java基础01"></a>Java基础01</h1><p><a href="https://www.bilibili.com/video/BV1Qb411g7cz?p=15">视频资料</a></p>
<h2 id="1、大纲"><a href="#1、大纲" class="headerlink" title="1、大纲"></a>1、大纲</h2><p><strong>什么是框架</strong></p>
<p>框架是一个半成品，已经对基础的代码进行了封装并提供相应的API，开发者在使用框架是直接调用封装好的api可以省去很多代码编写，从而提高工作效率和开发速度</p>
<p>SSM框架</p>
<p>有支付功能的都可以称为电商。</p>
<p>JavaSE-&gt;JavaWeb-&gt;JavaEE框架-&gt;JavaEE高级-&gt;项目</p>
<h3 id="1-1、主要应用"><a href="#1-1、主要应用" class="headerlink" title="1.1、主要应用"></a>1.1、主要应用</h3><p>Java基础是学习JavaEE、大数据、Android开发的基石！</p>
<p>Spring - Rest(Spring MVC)</p>
<p>Spark - Spark Streaming</p>
<h3 id="1-2、Java基础图解"><a href="#1-2、Java基础图解" class="headerlink" title="1.2、Java基础图解"></a>1.2、Java基础图解</h3><p>Java基础知识图解</p>
<p><img  src="https://www.picbed.cn/images/2021/05/01/1.png"  ><span class="image-caption">图解</span></p>
<h3 id="1-3、语言概述"><a href="#1-3、语言概述" class="headerlink" title="1.3、语言概述"></a>1.3、语言概述</h3><p>后台开发：Java仍是首选语言</p>
<p>Java、PHP、python、Go、Node.js</p>
<p><a href="https://baike.baidu.com/item/Java/85979?fr=aladdin#1">什么是Java</a></p>
<p>2004年，发布里程碑式版本：JDK1.5，为突出其重要性，更名为JDK5.0</p>
<p>2005年，J2SE-&gt;JavaSE     J2EE-&gt;JavaEE      J2ME-&gt;JavaME</p>
<p>2009年,Oracle公司收购SUN</p>
<p>2014年，JDK 8.0，继JDK5.0以来变化最大的版本</p>
<p>2018年3月，发布JDK 10.0，版本号也称为18.3</p>
<p><strong>Java技术体系平台</strong></p>
<p><img  src="https://www.picbed.cn/images/2021/05/01/2.png"  ><span class="image-caption">平台</span></p>
<p>Java语言的应用方向:</p>
<ul>
<li><p>企业级应用</p>
</li>
<li><p>Android平台应用</p>
</li>
<li><p>大数据平台开发</p>
</li>
<li><p>移动领域应用</p>
</li>
</ul>
<p>Java语言的特点：</p>
<ul>
<li><p>面向对象</p>
<ul>
<li>两个基本概念： 类、对象</li>
<li>三大特性： 封装、继承、多态</li>
</ul>
</li>
<li><p>健壮性</p>
</li>
<li><p>跨平台性</p>
<p>Write once,Run Anywhere</p>
</li>
</ul>
<p>因为有JVM，同一个Java程序在三个不同操作系统中都可以执行，就可以实现Java程序的跨平台性</p>
<p>Java两种核心机制：</p>
<ul>
<li><p>Java虚拟机</p>
</li>
<li><p>垃圾收集机制</p>
</li>
</ul>
<p><img  src="https://www.picbed.cn/images/2021/05/01/3.png"  ><span class="image-caption">机制</span></p>
<p>核心机制之垃圾回收</p>
<ul>
<li><p>不再使用的内存空间应回收</p>
</li>
<li><p>Java程序运行过程中自动进行，无法精准控制和干预</p>
</li>
</ul>
<p>那还会出现内存泄漏和内存溢出问题吗？</p>
<p>会</p>
<h2 id="2、Java语言环境搭建"><a href="#2、Java语言环境搭建" class="headerlink" title="2、Java语言环境搭建"></a>2、Java语言环境搭建</h2><p>什么是JDK,JRE</p>
<p><img src="https://www.picbed.cn/images/2021/05/01/4.png"></p>
<p><img src="https://www.picbed.cn/images/2021/05/01/5.png"></p>
<p>安装JDK</p>
<p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">JDK官网下载</a></p>
<p>jdk 8u131</p>
<blockquote>
<p> u: update</p>
</blockquote>
<p>环境变量：</p>
<p><img  src="https://www.picbed.cn/images/2021/05/01/7.png"  ><span class="image-caption">配置安装目录</span></p>
<p><img  src="https://www.picbed.cn/images/2021/05/01/6.png"  ><span class="image-caption">配置path</span></p>
<p>允许安装多个JDK 但只能使用一个来配置环境变量</p>
<p>win+R 输入cmd 执行java </p>
<p>然后执行javac</p>
<p>验证是否配置成功</p>
<p>学习参考jdk api文档</p>
<h2 id="3、第一个Java程序"><a href="#3、第一个Java程序" class="headerlink" title="3、第一个Java程序"></a>3、第一个Java程序</h2><p>先看Java的命名规范</p>
<p><a href="https://www.cnblogs.com/wkfvawl/p/12172756.html">java命名规范</a></p>
<p>编译： javac  Test.java</p>
<p>执行：java Test</p>
<p>第一个程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String arg[])</span> </span>&#123;<span class="hljs-comment">//arguments:参数</span><br>		System.out.print(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<ul>
<li><p>一个Java源文件中可以声明多个class，但是最多只有一个类声明为public的</p>
</li>
<li><p>而且要求声明为public的类的类名必须和源文件名相同·。</p>
</li>
<li><p>程序入口是main()方法</p>
</li>
<li><p>输出语句：</p>
<ul>
<li><p>System.out.print(“Hello World!”);</p>
</li>
<li><p>System.out.println(“Hello World!”);</p>
<p>先输出后换行</p>
</li>
</ul>
</li>
<li><p>每一行执行语句都以“;”结束</p>
</li>
<li><p>编译的过程：</p>
<ul>
<li>编译以后，会生成一个或多个字节码文件</li>
<li>字节码文件的文件名与Java源文件中的类名相同</li>
<li>有几个类就会有几个字节码文件</li>
</ul>
</li>
</ul>
<h2 id="4、基本语法（上）"><a href="#4、基本语法（上）" class="headerlink" title="4、基本语法（上）"></a>4、基本语法（上）</h2><h3 id="4-1、关键字和保留字"><a href="#4-1、关键字和保留字" class="headerlink" title="4.1、关键字和保留字"></a>4.1、关键字和保留字</h3><p><strong>关键字（keyword）:</strong></p>
<p>定义：</p>
<ul>
<li>被Java语言赋予了特殊含义，用作专门用途的字符串（单词）</li>
</ul>
<p>特点：关键字中所有字母都为小写</p>
<p><img  src="https://www.picbed.cn/images/2021/05/01/8.png"  ><span class="image-caption">关键字图表</span></p>
<p>​    <img src="https://www.picbed.cn/images/2021/05/01/9.png"></p>
<p>灰色：严格不算关键字，但可以当作关键字使用</p>
<p><strong>保留字（reserved word）:</strong></p>
<p>Java保留字： 现有版本尚未使用但以后版本可能会被作为关键字使用</p>
<p>命名标识符时注意避免使用保留字</p>
<p>goto、const</p>
<h3 id="4-2、标识符（Identifier）以及命名规则"><a href="#4-2、标识符（Identifier）以及命名规则" class="headerlink" title="4.2、标识符（Identifier）以及命名规则"></a>4.2、标识符（Identifier）以及命名规则</h3><p><strong>标识符</strong>：</p>
<ul>
<li>Java对各种变量、方法类等要素命名时使用的字符序列既是标识符</li>
<li>技巧:凡是自己可以起名字的地方都叫标识符<ul>
<li>例如:类名、变量名、方法名、接口名、包名……等等</li>
</ul>
</li>
</ul>
<p><strong>定义合法标识符规则：</strong>—&gt;不遵守，编译不通过</p>
<ul>
<li>由26个英文字母大小写，0-9，_或者$组成</li>
<li>数字不可开头</li>
<li>不可以使用关键字和保留字，但是可以包含它们</li>
<li>Java严格区分大小写，长度无限制</li>
<li>标识符不可包含空格</li>
</ul>
<p><strong>Java中的名称命名规范</strong>：—&gt;不遵守，编译可以通过，建议遵守。</p>
<p>​    包名： 多单词组成时，所有字母都小写：</p>
<ul>
<li>xxxyyyzzz</li>
</ul>
<p>类名、接口名：多单词组成时，所有单词首字母大写：</p>
<ul>
<li>XxxYyyZzz</li>
</ul>
<p>变量名、方法名：多单词组成时，第一个首字母小写，第二个单词开始，每个单词首字母大写：</p>
<ul>
<li>xxxYyyZzz</li>
</ul>
<p>常量名：所有字母都大写，多单词时每个单词都用下划线连接：</p>
<ul>
<li>XXX_YYY_ZZZ</li>
</ul>
<blockquote>
<p>注意：</p>
</blockquote>
<ul>
<li><p>起名字时，为了提高阅读性，要尽量有意义，”见名知意</p>
</li>
<li><p>Java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用</p>
</li>
</ul>
<h3 id="4-3、变量"><a href="#4-3、变量" class="headerlink" title="4.3、变量"></a>4.3、变量</h3><h4 id="4-3-1、变量定义、作用、注意点"><a href="#4-3-1、变量定义、作用、注意点" class="headerlink" title="4.3.1、变量定义、作用、注意点"></a>4.3.1、变量定义、作用、注意点</h4><ul>
<li>内存中的一个存储区域</li>
<li>该区域的数据可以在同一类型范围内不断变化</li>
<li>变量是程序中最基本的存储单元，包含<strong>变量类型</strong>、<strong>变量名和存储的值</strong></li>
</ul>
<p>变量的作用：</p>
<ul>
<li>用于在内存中保存数据</li>
</ul>
<p>使用变量需要注意：</p>
<ul>
<li>Java中每个变量必须<strong>先声明再使用</strong></li>
<li><strong>使用变量名来访问这块区域的数据</strong></li>
<li>变量的作用域:<ul>
<li>其定义所在的一对{}中</li>
</ul>
</li>
<li>变量只有在其作用域中才有效<ul>
<li>出了作用域就会失效</li>
</ul>
</li>
<li>同一作用域内，不能定义重名的变量</li>
</ul>
<p>变量的使用</p>
<ul>
<li>Java定义变量的格式：<ul>
<li>数据类型 变量名 = 变量值；</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String arg[])</span> </span>&#123;<br>		<span class="hljs-comment">//变量的定义</span><br>		<span class="hljs-keyword">int</span> myAge = <span class="hljs-number">12</span>;<br>    <span class="hljs-comment">//也可以</span><br>	<span class="hljs-comment">//int myAge;变量的声明</span><br>	<span class="hljs-comment">//myAge = 12变量的赋值</span><br>    	<br>		System.out.print(myAge);<br>	&#125;<br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String arg[])</span> </span>&#123;<br>		<br>		<span class="hljs-keyword">int</span> myAge;<br>		System.out.print(myAge);<br>	&#125;<br><br><span class="hljs-comment">//未初始化变量，没有默认值,未被赋值过</span><br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.Error: Unresolved compilation problem: <br>	The local variable myAge may not have been initialized<br><br></code></pre></td></tr></table></figure>

<h4 id="4-3-2、变量的分类"><a href="#4-3-2、变量的分类" class="headerlink" title="4.3.2、变量的分类"></a>4.3.2、变量的分类</h4><p><img  src="https://www.picbed.cn/images/2021/05/01/10.png"  ><span class="image-caption">按数据类型</span></p>
<blockquote>
<p>变量在类中声明的位置：</p>
</blockquote>
<p>​    成员变量 VS 局部变量</p>
<p><img src="https://www.picbed.cn/images/2021/05/01/13.png"></p>
<h5 id="1、整型"><a href="#1、整型" class="headerlink" title="1、整型"></a>1、整型</h5><p><img src="https://www.picbed.cn/images/2021/05/01/11.png"></p>
<p>整型：byte(1字节等于8bit)</p>
<p>short(2字节)</p>
<p>int(4字节)</p>
<p>long(8字节)</p>
<ul>
<li>byte范围：-128~127</li>
<li>声明long型变量，必须以”l“或者”L“结尾</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> s1 = <span class="hljs-number">123L</span>;<br>		System.out.print(s1);<br><br><br><span class="hljs-comment">//输出123</span><br></code></pre></td></tr></table></figure>



<ul>
<li>通常，定义整型变量时，使用int型。</li>
</ul>
<h5 id="2、浮点型"><a href="#2、浮点型" class="headerlink" title="2、浮点型"></a>2、浮点型</h5><p><img src="https://www.picbed.cn/images/2021/05/01/12.png"></p>
<p>浮点型：float(4字节)\double(8字节)</p>
<ul>
<li>浮点型表示带小数点的数值</li>
<li>float表示数值的范围比long还大</li>
<li>定义float类型变量时，变量要以”f”或者”F“结尾</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">float</span> f1 = <span class="hljs-number">12.34f</span>;<br>		System.out.print(f1);<br><br><br><span class="hljs-comment">//运行结果: 12.34</span><br></code></pre></td></tr></table></figure>

<ul>
<li>通常定义浮点型变量时，使用double型</li>
</ul>
<h5 id="3、字符型"><a href="#3、字符型" class="headerlink" title="3、字符型"></a>3、字符型</h5><p><img src="https://www.picbed.cn/images/2021/05/01/14.png"></p>
<ul>
<li><p>字符型：</p>
<ul>
<li>char(1字符=2字节)</li>
</ul>
</li>
<li><p>定义char型变量，通常使用一对<strong>‘ ’</strong>    单引号！</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">		<span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;C&#x27;</span>;<br>		System.out.print(c1);<br><br><span class="hljs-comment">//运行结果:C</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<ul>
<li>不能赋值两个字符</li>
</ul>
</li>
<li><p>表示方式：</p>
<ul>
<li>声明一个字符</li>
<li>转义字符</li>
<li>直接使用Unicode值来表示字符型常量</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">		<span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;\n&#x27;</span>;<br>		System.out.print(c1);<br><span class="hljs-comment">//  \t制表符</span><br><span class="hljs-comment">//输出换行符</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String arg[])</span> </span>&#123;<br>		<span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;\u0123&#x27;</span>;<br>		System.out.print(c1);<br>	&#125;<br><br><span class="hljs-comment">//输出 ？ 未显示</span><br><br><span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;\u0043&#x27;</span>;<br>		System.out.print(c1);<br><br><br><span class="hljs-comment">//输出 C</span><br><br></code></pre></td></tr></table></figure>



<p>了解：</p>
<p><img src="https://www.picbed.cn/images/2021/05/01/15.png"></p>
<p><a href="https://www.picbed.cn/image/6fJzC"><img  src="https://www.picbed.cn/images/2021/05/01/16.png"  ><span class="image-caption">16.png</span></a><br><a href="https://www.picbed.cn/image/6fL2M"><img  src="https://www.picbed.cn/images/2021/05/01/17.png"  ><span class="image-caption">17.png</span></a></p>
<p>ANSI  GBK</p>
<h5 id="4、布尔型"><a href="#4、布尔型" class="headerlink" title="4、布尔型"></a>4、布尔型</h5><p>boolean</p>
<ul>
<li><p>只能取两个值之一：</p>
<ul>
<li>true</li>
<li>false</li>
</ul>
</li>
<li><p>常常在条件判断、循环结构中使用</p>
</li>
</ul>
<h4 id="4-3-3、自动类型提升"><a href="#4-3-3、自动类型提升" class="headerlink" title="4.3.3、自动类型提升"></a>4.3.3、自动类型提升</h4><p>基本数据类型之间的运算规则：</p>
<p><strong>前提： 这里讨论的只是7种基本数据类型变量间的运算，不包含boolean类型的</strong></p>
<ul>
<li><p>自动类型提升</p>
<ul>
<li>范围小的和范围大的运算，需要用范围大的接受</li>
<li>用范围更大的也可以</li>
<li>byte–&gt; short –&gt;int–&gt;  long–&gt; float –&gt; double</li>
</ul>
<p><strong>结论：</strong></p>
<p>​    当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</p>
<blockquote>
<p>说明：</p>
</blockquote>
<p>此时的容量大小指的是，表示<strong>数的范围的大和小</strong>，比如float容量要大于long的容量</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> b1 = <span class="hljs-number">2</span>;<br>		<span class="hljs-keyword">int</span> i1 =<span class="hljs-number">12</span>;<br>		<span class="hljs-comment">//byte b2 = b1 + i1;错误！不兼容的类型，从int转换到byte可能会有损失。</span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">short</span> s1 = <span class="hljs-number">123</span>;<br>		<span class="hljs-keyword">double</span> d1 = s1;<br>		System.out.print(d1);<br><br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//97		int i1 = 10;		int i2 =c1+i1;		System.out.print(i2);//结果:107</span><br></code></pre></td></tr></table></figure>

<p>byte、char、 short –&gt;int–&gt;  long–&gt; float –&gt; double</p>
<p>特别的<strong>byte、char、 short</strong>三个做运算，结果都得是int型（包括两种相同的类型做运算）</p>
<h4 id="4-3-4、强制类型转换"><a href="#4-3-4、强制类型转换" class="headerlink" title="4.3.4、强制类型转换"></a>4.3.4、强制类型转换</h4><ul>
<li><p>自动类型提升的逆运算</p>
</li>
<li><p>需要使用强转符： （）</p>
</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>强制类型转换可能导致精度损失！</p>
</li>
<li><p>```java<br>//精度损失—例1double d1 = 12.3;//无论是12.9        int i1 = (int)d1;//截断操作，都会被转为12        System.out.print(i1);</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><br>- ```java<br>  		<span class="hljs-keyword">long</span> l1 = <span class="hljs-number">123</span>; 		<span class="hljs-keyword">short</span> s2 = (<span class="hljs-keyword">short</span>)l1; 		System.out.<span class="hljs-built_in">print</span>(s2);<span class="hljs-comment">//没有精度损失</span><br></code></pre></td></tr></table></figure></li>
<li><p>```java</p>
<pre><code>//精度损失---例2        int i2 = 128;        byte b = (byte)i2;                System.out.print(b);//结果: -128
</code></pre>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><br><br><br>特殊情况：<br><br>- 编码情况：<br>  - <span class="hljs-keyword">long</span> l = <span class="hljs-number">123</span>;<span class="hljs-comment">//123是int型</span><br>  - 自动类型提升了。故此时没加L也不会报错！<br>  - 赋值一个超过<span class="hljs-keyword">int</span>型的数字就会报错！！！此时必须加L<br><br><br><br><span class="hljs-keyword">float</span> f = <span class="hljs-number">12.3</span>;<br><br>会报错！必须加F<br><br><br><br>- 编码情况<span class="hljs-number">2</span>：<br><br>  - 整形常量，默认为<span class="hljs-keyword">int</span>型<br><br>  - 浮点型常量，默认为<span class="hljs-keyword">double</span>型<br><br>  - <span class="hljs-keyword">byte</span>  b = <span class="hljs-number">12</span>;<br><br>    <span class="hljs-keyword">byte</span> b1 = b +<span class="hljs-number">1</span>;<br><br>#### <span class="hljs-number">4.3</span><span class="hljs-number">.5</span>、字符串类型<span class="hljs-keyword">String</span><br><br>![](https:<span class="hljs-comment">//www.picbed.cn/images/2021/05/01/18.png)</span><br><br><span class="hljs-keyword">String</span>类型变量的使用：<br><br>- <span class="hljs-keyword">String</span>属于引用数据类型，翻译为：字符串<br><br>- 声明<span class="hljs-keyword">String</span>类型变量时，使用一对”“<br><br>- ```java<br>  <span class="hljs-keyword">String</span> s1 = <span class="hljs-string">&quot;Hello World!&quot;</span>;System.out.<span class="hljs-built_in">println</span>(s1);<span class="hljs-keyword">String</span> s2 = <span class="hljs-string">&quot;a&quot;</span><span class="hljs-keyword">String</span> s3 = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//都可以</span><br></code></pre></td></tr></table></figure></li>
<li><p>注意：char型的必须在单引号内加字符！！</p>
</li>
</ul>
<ul>
<li>String可以和8种基本数据类型变量做运算！</li>
<li>且运算只能是<strong>连接运算： +</strong></li>
</ul>
<p>计算的结果仍然是String类型！</p>
<p>练习：</p>
<p>1、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>		<span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>		String str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">//a -- 97</span><br><span class="hljs-comment">//A -- 65</span><br>		System.out.println(c+num+str);<br>		System.out.println(c+str+num);<br>		System.out.println(c+(num+str));<br>		System.out.println((c+num)+str);<br>		System.out.println(str+num+c);<br><br><br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">107hello</span><br><span class="hljs-comment">ahello10</span><br><span class="hljs-comment">a10hello</span><br><span class="hljs-comment">107hello</span><br><span class="hljs-comment">hello10a</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<p>2、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;*	*&quot;</span>);<br>		<br>		System.out.println(<span class="hljs-string">&#x27;*&#x27;</span>+<span class="hljs-string">&#x27;\t&#x27;</span>+<span class="hljs-string">&#x27;*&#x27;</span>);<br>		<br>		System.out.println(<span class="hljs-string">&#x27;*&#x27;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&#x27;*&#x27;</span>);<br>		<br>		<br>		System.out.println(<span class="hljs-string">&#x27;*&#x27;</span>+<span class="hljs-string">&#x27;\t&#x27;</span>+<span class="hljs-string">&quot;*&quot;</span>);<br>		<br>		System.out.println(<span class="hljs-string">&#x27;*&#x27;</span>+(<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>));<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*	*</span><br><span class="hljs-comment">93</span><br><span class="hljs-comment">*	*</span><br><span class="hljs-comment">51*</span><br><span class="hljs-comment">*	*</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<ul>
<li>String s1 = 123;</li>
<li>编译不通过，无法int转换为String</li>
</ul>
<p>String也无法强转为int</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String str = <span class="hljs-number">123</span> + <span class="hljs-string">&quot;&quot;</span>;<br>		System.out.println(str);<br>		<br>		<span class="hljs-keyword">int</span> num1 = Integer.parseInt(str);<br>		<span class="hljs-comment">//转换为int</span><br>        System.out.println(num1);<br></code></pre></td></tr></table></figure>

<h4 id="4-3-6、进制与进制的转换！"><a href="#4-3-6、进制与进制的转换！" class="headerlink" title="4.3.6、进制与进制的转换！"></a>4.3.6、进制与进制的转换！</h4><p>世界上有10种人，认识和不认识二进制的</p>
<p><img src="https://www.picbed.cn/images/2021/05/02/19.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">	<span class="hljs-keyword">int</span> num = <span class="hljs-number">0b110</span>;<br>		<span class="hljs-keyword">int</span> num1 = <span class="hljs-number">110</span>;<br>		<span class="hljs-keyword">int</span> num2 = <span class="hljs-number">0127</span>;<br>		<span class="hljs-keyword">int</span> num3 = <span class="hljs-number">0x110A</span>;<br>		<br>		System.out.println(num);<br>		System.out.println(num1);<br>		System.out.println(num2);<br>		System.out.println(num3);<br>		<br><br><br><span class="hljs-comment">//结果输出十进制:</span><br><span class="hljs-number">6</span><br><span class="hljs-number">110</span><br><span class="hljs-number">87</span><br><span class="hljs-number">4362</span><br></code></pre></td></tr></table></figure>

<p>二进制？十进制转换</p>
<h3 id="4-4、运算符"><a href="#4-4、运算符" class="headerlink" title="4.4、运算符"></a>4.4、运算符</h3><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p>
<ul>
<li>算术运算符</li>
<li>赋值运算符</li>
<li>比较运算符（关系运算符）</li>
<li>逻辑运算符</li>
<li><strong>位运算符</strong>很少用</li>
<li>三元运算符</li>
</ul>
<p><img src="https://www.picbed.cn/images/2021/05/02/20.png"></p>
<h5 id="4-4-1、算术运算符"><a href="#4-4-1、算术运算符" class="headerlink" title="4.4.1、算术运算符"></a>4.4.1、算术运算符</h5><p>运算符之一：算术运算符</p>
<blockquote>
<p>  +-*/ % (前)++ （后）++ (前)–（后）–  +连接运算符</p>
</blockquote>
<p>除号： /</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num1 = <span class="hljs-number">12</span>;<br>		<span class="hljs-keyword">int</span> num2 = <span class="hljs-number">5</span>;<br>		<span class="hljs-keyword">int</span> result = num1/num2;<br>		System.out.println(result);<br><br><span class="hljs-comment">//结果：2</span><br><br><span class="hljs-keyword">int</span> result2 = num1/num2 *num2;<br><span class="hljs-comment">//结果：10</span><br><br><br><span class="hljs-keyword">double</span> result3 = num1/num2;<br><span class="hljs-comment">//结果：2.0</span><br>右边先运行出来，已经是<span class="hljs-keyword">int</span>了。再赋值给<span class="hljs-keyword">double</span><br>    <br>   <br> <span class="hljs-keyword">double</span> resule4 = num1/num2+<span class="hljs-number">0.0</span>; <span class="hljs-comment">//2.0</span><br><br> <span class="hljs-keyword">double</span> resule4 = num1/(num2+<span class="hljs-number">0.0</span>); <span class="hljs-comment">//2.4</span><br><br> <span class="hljs-keyword">double</span> resule4 =(<span class="hljs-keyword">double</span>) num1/num+<span class="hljs-number">0.0</span>); <span class="hljs-comment">//2.4</span><br></code></pre></td></tr></table></figure>



<p>取余运算</p>
<p>结果的符号和被模数符号相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">		<span class="hljs-keyword">int</span> m1 = <span class="hljs-number">12</span>;<br>		<span class="hljs-keyword">int</span> n1 = <span class="hljs-number">5</span>;<br>		System.out.println(m1%n1);<br>		<br>		<span class="hljs-keyword">int</span> m2 = -<span class="hljs-number">12</span>;<br>		<span class="hljs-keyword">int</span> n2 = <span class="hljs-number">5</span>;<br>		System.out.println(m2%n2);<br>		<br>		<span class="hljs-keyword">int</span> m3 = <span class="hljs-number">12</span>;<br>		<span class="hljs-keyword">int</span> n3 = -<span class="hljs-number">5</span>;<br>		System.out.println(m3%n3);<br>		<br>		<br>		<span class="hljs-keyword">int</span> m4 = -<span class="hljs-number">12</span>;<br>		<span class="hljs-keyword">int</span> n4 = -<span class="hljs-number">5</span>;<br>		System.out.println(m4%n4);<br><br><br><span class="hljs-comment">//结果</span><br><span class="hljs-number">2</span><br>-<span class="hljs-number">2</span><br><span class="hljs-number">2</span><br>-<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure>



<ul>
<li>开发中，经常使用%取余来判断能否被除尽的情况</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">(前)++ 例如：++a<br>    结论:<br>	先自增<span class="hljs-number">1</span>，后运算<br><br>（后）++ 例如：a++<br> 	结论:<br>	先运算，后自增<span class="hljs-number">1</span><br><br>	<span class="hljs-keyword">int</span> a1 = <span class="hljs-number">10</span>;<br>		<span class="hljs-keyword">int</span> b1 = ++a1;<br>		System.out.println(a1+<span class="hljs-string">&quot;\t&quot;</span>+b1);<br>		<br>		<br>		<span class="hljs-keyword">int</span> a2 = <span class="hljs-number">10</span>;<br>		<span class="hljs-keyword">int</span> b2 = a2++;<br>		System.out.println(a2+<span class="hljs-string">&quot;\t&quot;</span>+b2);<br><br><br><span class="hljs-comment">//结果:</span><br><br><span class="hljs-number">11</span>	<span class="hljs-number">11</span><br><span class="hljs-number">11</span>	<span class="hljs-number">10</span><br><br>自增<span class="hljs-number">1</span>不会改变本身变量的数据类型！<br><br><br> (前)--  例如：--a<br>结论:<br>	先自减<span class="hljs-number">1</span>，后运算<br>（后）-- 例如：a--<br>结论:<br>	先运算，后自减<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>



<ul>
<li>小练习：</li>
</ul>
<p><strong>Java:随意给出一个整数(3位数)，打印显示他的个位数，十位数，百位数的值:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> teat01;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03</span> </span>&#123;	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;		<span class="hljs-keyword">int</span> num = <span class="hljs-number">169</span>;		<span class="hljs-keyword">int</span> h = num/<span class="hljs-number">100</span>;				<span class="hljs-keyword">int</span> t = num%<span class="hljs-number">100</span>/<span class="hljs-number">10</span>;		<span class="hljs-comment">//num/10%10				int o = num%10;		//num%100%10				System.out.println(&quot;百位：&quot;+h);		System.out.println(&quot;十位：&quot;+t);		System.out.println(&quot;个位：&quot;+o);			&#125;&#125;</span><br></code></pre></td></tr></table></figure>

<h5 id="4-4-2、赋值运算符"><a href="#4-4-2、赋值运算符" class="headerlink" title="4.4.2、赋值运算符"></a>4.4.2、赋值运算符</h5><p>符号 =</p>
<ul>
<li>当” = “两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li>
<li><strong>支持连续赋值</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//赋值符号</span><br>		<span class="hljs-keyword">int</span> i1 = <span class="hljs-number">10</span>;<br>		<span class="hljs-keyword">int</span> j1 = <span class="hljs-number">10</span>;<br>		<br>		<span class="hljs-keyword">int</span> i2,j2;<br>		<span class="hljs-comment">//连续赋值</span><br>		<span class="hljs-keyword">int</span> i3 = <span class="hljs-number">10</span>,j3 = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure>





<ul>
<li>扩展赋值运算符：<ul>
<li>+=</li>
<li>-=</li>
<li>*=</li>
<li>/=</li>
<li>%=</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num1 = <span class="hljs-number">10</span>;<br>num1 += <span class="hljs-number">2</span>;<br><span class="hljs-comment">//num1 = num1 + 2;</span><br><br><br><span class="hljs-keyword">int</span> num2 = <span class="hljs-number">12</span>;<br>num2 %= <span class="hljs-number">5</span>;<br><span class="hljs-comment">//num2 = num2 % 5;	</span><br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>区别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">short</span> s1 = <span class="hljs-number">10</span>;s1 = s1 + <span class="hljs-number">2</span>;<span class="hljs-comment">//编译失败s1 += 2;//编译通过，不会改变变量本身的数据类型！！！！</span><br></code></pre></td></tr></table></figure>

<p>开发中，如果希望变量实现+2的操作，有几种方法？</p>
<p>(前提： int num =10;)</p>
<ul>
<li>num = num + 2;</li>
<li>num += 2;(推荐！！！不会改变类型)</li>
</ul>
<p>开发中，如果希望变量实现+1的操作，有几种方法？</p>
<p>(前提： int num =10;)</p>
<ul>
<li><p>num = num + 1;</p>
</li>
<li><p>num += 1;</p>
</li>
<li><p>num ++ ;(推荐！！！j简洁)</p>
</li>
</ul>
<h5 id="4-4-3、比较运算符"><a href="#4-4-3、比较运算符" class="headerlink" title="4.4.3、比较运算符"></a>4.4.3、比较运算符</h5><p><img src="https://www.picbed.cn/images/2021/05/04/21.png"></p>
<p>结论：</p>
<ul>
<li>比较运算符的结果是boolean类型！</li>
<li>区分 == 和 = </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;		<span class="hljs-keyword">int</span> j = <span class="hljs-number">20</span>;		System.out.println(i==j);		System.out.println(i=j);<span class="hljs-comment">//结果：false20</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">	<span class="hljs-keyword">boolean</span> b1 = <span class="hljs-keyword">true</span>;<br>		<span class="hljs-keyword">boolean</span> b2 = <span class="hljs-keyword">false</span>;<br>		System.out.println(b1==b2);<br>		System.out.println(b1=b2);<br><br><br><span class="hljs-comment">//结果:</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure>

<h5 id="4-4-4、逻辑运算符"><a href="#4-4-4、逻辑运算符" class="headerlink" title="4.4.4、逻辑运算符"></a>4.4.4、逻辑运算符</h5><p>只适用于boolean类型</p>
<p><img src="https://www.picbed.cn/images/2021/05/04/22.png"></p>
<p>异或：</p>
<ul>
<li>可记为相同为false</li>
<li>不同为true</li>
</ul>
<p>逻辑运算符</p>
<p>&amp;     &amp;&amp;    |      ||     ！     ^</p>
<p>说明：</p>
<ul>
<li>逻辑运算符操作的都是boolean类型的变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//区别&amp; 与 &amp;&amp;</span><br>		<span class="hljs-keyword">boolean</span> b1 = <span class="hljs-keyword">true</span>;<br>		b1 = <span class="hljs-keyword">false</span>;<br>		<span class="hljs-keyword">int</span> num1 = <span class="hljs-number">10</span>;<br>		<span class="hljs-keyword">if</span>(b1 &amp; (num1++ &gt; <span class="hljs-number">0</span>)) &#123;<br>			System.out.println(<span class="hljs-string">&quot;正确&quot;</span>);<br>		&#125;<span class="hljs-keyword">else</span> &#123;<br>			System.out.println(<span class="hljs-string">&quot;错误&quot;</span>);<br>		&#125;<br>		<br>		System.out.println(num1);<br>		<span class="hljs-comment">//区别&amp; 与 &amp;&amp;</span><br>		<span class="hljs-keyword">boolean</span> b2 = <span class="hljs-keyword">true</span>;<br>		b2 = <span class="hljs-keyword">false</span>;<br>		<span class="hljs-keyword">int</span> num2 = <span class="hljs-number">10</span>;<br>		<span class="hljs-keyword">if</span>(b2 &amp;&amp; (num2++ &gt; <span class="hljs-number">0</span>)) &#123;<br>			System.out.println(<span class="hljs-string">&quot;正确&quot;</span>);<br>		&#125;<span class="hljs-keyword">else</span> &#123;<br>			System.out.println(<span class="hljs-string">&quot;错误&quot;</span>);<br>		&#125;<br>				<br>		System.out.println(num2);<br><br><br><br><span class="hljs-comment">//结果：</span><br>错误<br><span class="hljs-number">11</span><br>错误<br><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>

<ul>
<li>相同点：<ul>
<li>&amp;与&amp;&amp;的运算结果相同</li>
<li>当符号左边是true时，二者都会执行符号右边的运算。</li>
</ul>
</li>
<li>不同点：<ul>
<li>当符号左边是false时，&amp;继续执行符号右边的运算，&amp;&amp;不再执行符号右边的运算。</li>
</ul>
</li>
</ul>
<p>区分： | 与|| 触类旁通</p>
<ul>
<li>相同点：<ul>
<li>|与||的运算结果相同</li>
<li>当符号左边是false时，二者都会执行符号右边的运算。</li>
</ul>
</li>
<li>不同点：<ul>
<li>当符号左边是true时，|继续执行符号右边的运算，||不再执行符号右边的运算。</li>
</ul>
</li>
</ul>
<p><strong>开发中，推荐使用||</strong></p>
<h5 id="4-4-5、位运算符（了解）"><a href="#4-4-5、位运算符（了解）" class="headerlink" title="4.4.5、位运算符（了解）"></a>4.4.5、位运算符（了解）</h5><p><img src="https://www.picbed.cn/images/2021/05/04/23.png"></p>
<p>每向左移一位，就是它十进制的数乘以2的一次幂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">21</span>;<br>		System.out.println(<span class="hljs-string">&quot;i &lt;&lt; 2：&quot;</span>+(i &lt;&lt; <span class="hljs-number">2</span>));<br>		System.out.println(<span class="hljs-string">&quot;i &lt;&lt; 3：&quot;</span>+(i &lt;&lt; <span class="hljs-number">3</span>));<br><br><br><span class="hljs-comment">//结果：</span><br>i &lt;&lt; <span class="hljs-number">2</span>：<span class="hljs-number">84</span><br>i &lt;&lt; <span class="hljs-number">3</span>：<span class="hljs-number">168</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">		System.out.println(<span class="hljs-string">&quot;i &lt;&lt; 27：&quot;</span> + (i &lt;&lt; <span class="hljs-number">27</span>));<br><br><span class="hljs-comment">//结果</span><br>i &lt;&lt; <span class="hljs-number">27</span>：-<span class="hljs-number">1476395008</span><br></code></pre></td></tr></table></figure>

<p>结论：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">位运算符操作的都是整型的数据<br><br>&lt;&lt; : 在一定范围内，每向左移一位，相当于*<span class="hljs-number">2</span><br><br>    <br>&gt;&gt;: 在一定范围内，每向右移一位，相当于/<span class="hljs-number">2</span><br><br>最高位看原来是<span class="hljs-number">0</span>还是<span class="hljs-number">1</span>来补<br></code></pre></td></tr></table></figure>





<p>面试题：</p>
<p>最高效的计算2*8？</p>
<p>2&lt;&lt;3或者8&lt;&lt;1</p>
<p>&amp; | ^ ~:与、或、异或、非</p>
<p>底层二进制。。。了解即可。。。</p>
<h5 id="4-4-6、三元运算符"><a href="#4-4-6、三元运算符" class="headerlink" title="4.4.6、三元运算符"></a>4.4.6、三元运算符</h5><blockquote>
<p> 结构：</p>
</blockquote>
<ul>
<li>(条件表达式)？表达式1 : 表达式2</li>
</ul>
<blockquote>
<p>说明:</p>
</blockquote>
<ul>
<li>条件表达式结果为boolean类型</li>
<li>根据条件表达式真或假，决定执行表达式1还是表达式2</li>
<li>如果表达式为true,则执行表达式1</li>
<li>如果表达式为false,则执行表达式2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取两个整数的较大值</span><br>		<span class="hljs-keyword">int</span> m = <span class="hljs-number">12</span>;<br>		<span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br>		<span class="hljs-keyword">int</span> max = (m&gt;n)?m:n;<br>		System.out.println(max);	<br><br><span class="hljs-comment">//结果</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure>

<ul>
<li>表达式1 和 表达式2 要求是一致的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> num = (m&gt;n)?<span class="hljs-number">2</span>:<span class="hljs-number">1.0</span>;<br>		System.out.println(num);<br> <br><br><br><span class="hljs-comment">//(m&gt;n)?2:&quot;n大&quot;;编译错误，要求接收结果的值，可以同时接收表达式1 和 表达式2</span><br><br><span class="hljs-comment">//结果</span><br><span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure>

<ul>
<li>三元运算符可以嵌套使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> m = <span class="hljs-number">5</span>;<br>		<span class="hljs-keyword">int</span> n = <span class="hljs-number">12</span>;<br>		String maxStr = (m &gt; n)?<span class="hljs-string">&quot;m大&quot;</span>:((m == n)?<span class="hljs-string">&quot;相等&quot;</span>:<span class="hljs-string">&quot;n大&quot;</span>);<br>		<br>		System.out.println(maxStr);<br><br><span class="hljs-comment">//结果：</span><br>n大<br></code></pre></td></tr></table></figure>

<p>练习：</p>
<p>获取三个数的最大值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">		<span class="hljs-keyword">int</span> m = <span class="hljs-number">5</span>;<br>		<span class="hljs-keyword">int</span> n = <span class="hljs-number">12</span>;<br>		<span class="hljs-keyword">int</span> q = -<span class="hljs-number">13</span>;<br>		<br>		<br>		<span class="hljs-keyword">int</span> max1 = (m&gt;n)?m:n;<br>		<span class="hljs-keyword">int</span> max2 = (max1&gt;q)?max1:q;<br>		<br>		System.out.print(max2);<br>		<span class="hljs-comment">//int max = (((m&gt;n)?m:n)&gt;q)?((m&gt;n)?m:n):q;</span><br><br><span class="hljs-comment">//不建议使用后面这种！可读性太差！！！</span><br><span class="hljs-comment">//效率并未提高！！！</span><br></code></pre></td></tr></table></figure>

<ul>
<li>结论：<ul>
<li>凡是可以使用三元运算符的地方，都可以改写为if-else</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> m = <span class="hljs-number">12</span>;<br>		<span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br>		<span class="hljs-keyword">if</span>(m&gt;n) &#123;<br>			System.out.println(<span class="hljs-string">&quot;m大&quot;</span>);<br>		&#125;<span class="hljs-keyword">else</span> &#123;<br>			System.out.println(<span class="hljs-string">&quot;n大&quot;</span>);<br>		&#125;<br></code></pre></td></tr></table></figure>



<p>反之，不成立。</p>
<blockquote>
<p>如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。</p>
</blockquote>
<p>原因：简洁、执行效率高！</p>
<h5 id="4-4-7、运算符的优先级"><a href="#4-4-7、运算符的优先级" class="headerlink" title="4.4.7、运算符的优先级"></a>4.4.7、运算符的优先级</h5><p><img src="https://www.picbed.cn/images/2021/05/05/24629b8d625d3d18b6.png"></p>
<p>没必要记——优先计算的加括号（）</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础篇02</title>
    <url>/2021/05/05/Java%E5%9F%BA%E7%A1%8002/</url>
    <content><![CDATA[<h1 id="Java基础篇02"><a href="#Java基础篇02" class="headerlink" title="Java基础篇02"></a>Java基础篇02</h1><h2 id="5、基本语法（下）"><a href="#5、基本语法（下）" class="headerlink" title="5、基本语法（下）"></a>5、基本语法（下）</h2><h3 id="5-1、程序流程控制"><a href="#5-1、程序流程控制" class="headerlink" title="5.1、程序流程控制"></a>5.1、程序流程控制</h3><p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p>
<p>其流程控制方式采用结构化程序设计中规定的三种基本流程结构，即</p>
<ul>
<li>顺序结构<ul>
<li>程序从上到下逐行地执行，中间没有任何判断和跳转</li>
</ul>
</li>
<li>分支结构<ul>
<li>根据条件，选择性地执行某段代码</li>
<li>有if-else和switch-case两种分支语句</li>
</ul>
</li>
<li>循环结构<ul>
<li>根据循环条件，重复性的执行某段代码</li>
<li>有while、do…while、for三种循环语句</li>
<li>注：<ul>
<li>JDK1.5提供了foreach循环，方便的遍历集合、数组元素。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="5-1-1、分支结构"><a href="#5-1-1、分支结构" class="headerlink" title="5.1.1、分支结构"></a>5.1.1、分支结构</h5><h6 id="5-1-1-1、if-else"><a href="#5-1-1-1、if-else" class="headerlink" title="5.1.1.1、if-else"></a>5.1.1.1、if-else</h6><p>if语句三种格式：</p>
<blockquote>
<p>1 、 if(条件表达式){</p>
<p>​                执行代码块;</p>
<p>​        }</p>
</blockquote>
<p><img  src="https://www.picbed.cn/images/2021/05/05/1fdb7d5656b952984.png"  ><span class="image-caption">1fdb7d5656b952984.png</span></p>
<blockquote>
<p> if(条件表达式){</p>
<p>​                执行代码块1;</p>
<p>​        }else{</p>
<p>​                执行代码块2；</p>
<p>​        }</p>
</blockquote>
<p><img  src="https://www.picbed.cn/images/2021/05/05/21d18cd98afab6393.png"  ><span class="image-caption">21d18cd98afab6393.png</span></p>
<blockquote>
<p>if(条件表达式1){</p>
<p>​                执行代码块1;</p>
<p>​        }else if(条件表达式2){</p>
<p>​                执行代码块2；</p>
<p>​        }</p>
<p>……</p>
<p>​        else{</p>
<p>​                执行代码块n；</p>
<p>​        }</p>
</blockquote>
<p><img  src="https://www.picbed.cn/images/2021/05/05/30a85988d901eb9c4.png"  ><span class="image-caption">30a85988d901eb9c4.png</span></p>
<p>选一个</p>
<p>分支结构中的if-else(条件判断结构)</p>
<p>1、三种结构</p>
<p>第一种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式)&#123;<br><br>	执行代码块;<br><br>&#125;<br><br>第二种：二选一<br><br><span class="hljs-keyword">if</span>(条件表达式)&#123;<br><br>	执行代码块<span class="hljs-number">1</span>;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>	执行代码块<span class="hljs-number">2</span>；<br>&#125;<br><br>第三种：多选一<br><br><br><br><span class="hljs-keyword">if</span>(条件表达式<span class="hljs-number">1</span>)&#123;<br><br>	执行代码块<span class="hljs-number">1</span>;<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件表达式<span class="hljs-number">2</span>)&#123;<br>	执行代码块<span class="hljs-number">2</span>；<br><br>&#125;<br><br>……<br><span class="hljs-keyword">else</span>&#123;<br>	执行代码块n；<br>&#125;<br></code></pre></td></tr></table></figure>

<h6 id="5-1-1-2、Scanner类-补充"><a href="#5-1-1-2、Scanner类-补充" class="headerlink" title="5.1.1.2、Scanner类(补充)"></a>5.1.1.2、Scanner类(补充)</h6><p>如何从键盘获取不同类型的变量：需要使用Scanner类</p>
<p>具体实现步骤：</p>
<p>1、导包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br></code></pre></td></tr></table></figure>



<p>2、Scanner的实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br></code></pre></td></tr></table></figure>



<p>3、调用Scanner类的相关方法，来获取指定类型的变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = sc.nextInt();<br>System.out.println(num);<br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<br>		System.out.println(<span class="hljs-string">&quot;请输入你的姓名:&quot;</span>);<br>		String name = sc.next();<br>		System.out.println(name);<br>		<br>		System.out.println(<span class="hljs-string">&quot;请输入你的年龄:&quot;</span>);<br>		<span class="hljs-keyword">int</span> age = sc.nextInt();<br>		System.out.println(age);<br>		<br>		System.out.println(<span class="hljs-string">&quot;请输入你的体重:&quot;</span>);<br>		<span class="hljs-keyword">double</span> weight = sc.nextDouble();<br>		System.out.println(weight);<br>		<br>		<br>		sc.close();<br></code></pre></td></tr></table></figure>

<blockquote>
<p>对于char型的获取，Scanner没有提供相关的方法。只能够获取一个字符串.</p>
<p>只获取一个字符，使用charAt();</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;请输入你的性别:(男/女)&quot;</span>);<br>		String gender = sc.next();<br><br>		<span class="hljs-keyword">char</span> genderChar = gender.charAt(<span class="hljs-number">0</span>);		<span class="hljs-comment">//获取索引为0位置上的字符</span><br><br>		System.out.println(genderChar);<br>		sc.close();<br></code></pre></td></tr></table></figure>

<p>使用nextInt()但是用户输入double型，此时会出现InputMismatchException。输入内容不匹配，程序直接终止。</p>
<p>注意：</p>
<ul>
<li>需要根据相应的方法，来输入指定类型的值，如果输入的数据类型与要求的类型不匹配时，会报异常InputMismatchException，导致程序终止。</li>
</ul>
<h6 id="5-1-1-3、分支结构之二switch-case"><a href="#5-1-1-3、分支结构之二switch-case" class="headerlink" title="5.1.1.3、分支结构之二switch-case"></a>5.1.1.3、分支结构之二switch-case</h6><p><img src="https://www.picbed.cn/images/2021/05/09/4c8b9f9b877375447.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 常量<span class="hljs-number">1</span>:<br>        语句<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//break;</span><br>    <span class="hljs-keyword">case</span> 常量<span class="hljs-number">2</span>:<br>        语句<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//break;</span><br>        <br>    … …<br>      <br>    <span class="hljs-keyword">case</span> 常量N:<br>        语句N;<br>        <span class="hljs-comment">//break;</span><br>    <span class="hljs-keyword">default</span>:<br>        语句;<br>        <span class="hljs-comment">//break;</span><br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>break不是必须要有的，根据实际情况而定</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> number = <span class="hljs-number">2</span>;<br>		<br>		<span class="hljs-keyword">switch</span>(number) &#123;<br>		<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>			System.out.println(<span class="hljs-string">&quot;zero&quot;</span>);<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>			System.out.println(<span class="hljs-string">&quot;one&quot;</span>);<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>			System.out.println(<span class="hljs-string">&quot;two&quot;</span>);<br>			<br>		<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>			System.out.println(<span class="hljs-string">&quot;three&quot;</span>);	<br>		<span class="hljs-keyword">default</span>:<br>			System.out.println(<span class="hljs-string">&quot;other&quot;</span>);<br>		&#125;<br><br><span class="hljs-comment">//结果：</span><br>two<br>three<br>other<br><br></code></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><p>根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句</p>
<p>当调用完执行语句以后，则仍然向下执行其他case结构中的执行语句，<strong>直到遇到break关键字或者此switch-case结构末尾结束为止</strong>。</p>
</li>
<li><p>break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构。</p>
</li>
</ul>
<ul>
<li>switch(number) <ul>
<li>switch结构中的表达式，只能是如下的6种数据类型之一<ul>
<li>byte</li>
<li>short</li>
<li>char</li>
<li>int</li>
<li>枚举类型(JDK5.0新增)</li>
<li>String类型(JDK7.0新增)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>switch语句应用举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String season = <span class="hljs-string">&quot;summer&quot;</span>;<br>	<br>	<span class="hljs-keyword">switch</span>(season) &#123;<br>	<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;spring&quot;</span>:<br>		System.out.println(<span class="hljs-string">&quot;春暖花开&quot;</span>);<br>		<span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;summer&quot;</span>:<br>		System.out.println(<span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>		<span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;autumn&quot;</span>:<br>		System.out.println(<span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>		<span class="hljs-keyword">break</span>;<br>		<br>	<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;winter&quot;</span>:<br>		System.out.println(<span class="hljs-string">&quot;冬雪皑皑&quot;</span>);<br>		<span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">default</span>:<br>		System.out.println(<span class="hljs-string">&quot;输入有误&quot;</span>);<br>		<span class="hljs-keyword">break</span>;<br>	&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><p>case之后只能声明常量，不能声明范围。</p>
</li>
<li><p>break关键字</p>
<ul>
<li>可选的</li>
</ul>
</li>
<li><p>default</p>
<ul>
<li>相当于if-else结构中的else</li>
<li>default结构是可选的，而且位置是灵活的。</li>
</ul>
</li>
</ul>
<h5 id="5-1-2、循环结构"><a href="#5-1-2、循环结构" class="headerlink" title="5.1.2、循环结构"></a>5.1.2、循环结构</h5><p>​    在某些条件满足的情况下，反复执行特定代码的功能</p>
<p>循环语句分类：</p>
<ul>
<li>for循环</li>
<li>while循环</li>
<li>do-while循环</li>
</ul>
<p>循环语句的四个组成部分</p>
<ul>
<li>初始化部分(init_statement)</li>
<li>循环条件部分(test_exp)</li>
<li>循环体部分(body_statement)</li>
<li>迭代部分(alter_statement)</li>
</ul>
<p><img src="https://www.picbed.cn/images/2021/05/15/5.png"></p>
<h6 id="5-1-2-1、for循环"><a href="#5-1-2-1、for循环" class="headerlink" title="5.1.2.1、for循环"></a>5.1.2.1、for循环</h6><p>for循环结构的使用</p>
<p>一、循环结构的4个要素</p>
<ul>
<li>初始化条件</li>
<li>循环条件 ——-&gt;是boolean类型</li>
<li>循环体</li>
<li>迭代条件</li>
</ul>
<p>二、for循环的结构</p>
<p>for(①;②;④){</p>
<p>​    ③</p>
<p>}</p>
<p>执行过程:    ①–&gt;②–&gt;③–&gt;④–&gt;②–&gt;③–&gt;④–&gt;…….②</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++) &#123;<br>			System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>		&#125;<br></code></pre></td></tr></table></figure>

<p><strong>i在for循环内有效，出了for循环就失效了。</strong></p>
<p>练习：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(System.out.print(<span class="hljs-string">&#x27;a&#x27;</span>);j&lt;<span class="hljs-number">3</span>;j++,System.out.print(<span class="hljs-string">&#x27;c&#x27;</span>)) &#123;<br>        System.out.print(<span class="hljs-string">&#x27;b&#x27;</span>);<br>    &#125;<br><br>结果:<br>abcbc<br></code></pre></td></tr></table></figure>

<p>例题：</p>
<p>遍历100以内的偶数,并且输出所有偶数的和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">100</span>;i++) &#123;<br>			<span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>				System.out.println(i);<br>				sum += i;<br>				count++;<br>			&#125;<br>		&#125;<br>		System.out.println(count);<br>		System.out.println(sum);<br><br>结果:<br><span class="hljs-number">50</span><br><span class="hljs-number">2550</span><br></code></pre></td></tr></table></figure>

<h6 id="5-1-2-2、while循环"><a href="#5-1-2-2、while循环" class="headerlink" title="5.1.2.2、while循环"></a>5.1.2.2、while循环</h6><p>while循环的结构</p>
<p>①</p>
<p>while(②){</p>
<p>​    ③；</p>
<p>​    ④；</p>
<p>}</p>
<p>执行过程：</p>
<p>①–&gt;②–&gt;③–&gt;④–&gt;②–&gt;③–&gt;④–&gt;……–&gt;②</p>
<p>说明：</p>
<p>1、写while循环千万不要丢了迭代条件，一旦丢了，就可能导致死循环！</p>
<p>2、我们写程序，要避免出现死循环。</p>
<p>3、for循环和while循环是可以相互转换的！</p>
<p>算法：有限性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//遍历100以内的所有偶数</span><br><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>        System.out.println(i);<br>    &#125;<br>    i++;<br>&#125;<br>除了<span class="hljs-keyword">while</span>循环以后，仍可以调用。<br></code></pre></td></tr></table></figure>

<p>区别：</p>
<p>for循环和while循环的初始化条件部分的作用范围不同。</p>
<h6 id="5-1-2-3、do-while循环"><a href="#5-1-2-3、do-while循环" class="headerlink" title="5.1.2.3、do-while循环"></a>5.1.2.3、do-while循环</h6><p>一、循环结构的4个要素</p>
<ul>
<li>初始化条件</li>
<li>循环条件 ——-&gt;是boolean类型</li>
<li>循环体</li>
<li>迭代条件</li>
</ul>
<p>二、do-while循环结构</p>
<p>①</p>
<p>do{</p>
<p>​    ③；</p>
<p>​    ④；</p>
<p>}while(②);</p>
<p>执行过程：①–&gt;③–&gt;④–&gt;②–&gt;….—&gt;②</p>
<p>说明：</p>
<p>1、do-while循环至少会执行一次循环体！</p>
<p>2、开发中，使用for和while更多一些。较少使用do-while.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//遍历100以内的所有偶数</span><br>		<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">do</span>&#123;<br>			<span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>				System.out.println(i);<br>			&#125;<br>			i++;<br>		&#125;<span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure>

<h5 id="5-1-3、循环语句综合例题"><a href="#5-1-3、循环语句综合例题" class="headerlink" title="5.1.3、循环语句综合例题"></a>5.1.3、循环语句综合例题</h5><p>最简单”无限“循环格式：while(true),for(;;),无限循环存在的原因是并不知道循环多少次，需要根据循环体内部某些条件，来控制循环的结束。</p>
<p>题目：</p>
<p>​    从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">int</span> positiveNumber = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录正数的个数</span><br>		<span class="hljs-keyword">int</span> negativeNumber = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录负数的个数</span><br>	<br>		<span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>      <span class="hljs-comment">//for(;;)&#123;</span><br>      <span class="hljs-comment">//效果一样</span><br>			<span class="hljs-keyword">int</span> num = sc.nextInt();<br>			<br>			<span class="hljs-comment">//判断number的正负情况</span><br>			<span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>) &#123;<br>				positiveNumber++;<br>			&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">0</span>) &#123;<br>				negativeNumber++;<br>			&#125;<span class="hljs-keyword">else</span> &#123;<br>				<span class="hljs-comment">//一旦(输入0)执行break,跳出循环。</span><br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>		&#125;<br>		System.out.println(positiveNumber);<br>		System.out.println(negativeNumber);<br></code></pre></td></tr></table></figure>



<p>说明：</p>
<ul>
<li>不在循环条件部分限制次数的结构：<ul>
<li>for(;;)或while(true)</li>
</ul>
</li>
<li>结束循环有几种方式？<ul>
<li>方式一：循环条件部分返回false</li>
<li>方式二：在循环体中，执行break</li>
</ul>
</li>
</ul>
<h5 id="5-1-4、嵌套循环-多重循环"><a href="#5-1-4、嵌套循环-多重循环" class="headerlink" title="5.1.4、嵌套循环(多重循环)"></a>5.1.4、嵌套循环(多重循环)</h5><p>一般不超过三层</p>
<p>1、嵌套循环：</p>
<p>将一个循环结构A声明在另一个循环结构B的循环体中，就构成了嵌套循环。</p>
<p>2、</p>
<p>外层查询</p>
<p>内层循环</p>
<p>说明：</p>
<ul>
<li>内层循环结构遍历一遍，只相当于外层循环体执行了一次</li>
<li>假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m*n次</li>
</ul>
<p>4、技巧</p>
<p>​    外层循环控制行数，内层循环控制列数</p>
<p>一百以内的所有质数的输出</p>
<p>质数：</p>
<ul>
<li>素数，只能被1和它本身整除的自然数。<ul>
<li>从2开始，到这个数-1结束为止，都不能被整除</li>
</ul>
</li>
</ul>
<p>最小的质数是2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	<br>	<span class="hljs-keyword">boolean</span> isFlag = <span class="hljs-keyword">true</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>		<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt; i;j++) &#123;<br>			<span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>) &#123;<br>				isFlag = <span class="hljs-keyword">false</span>;<br>			&#125;	<br>		&#125;<br>		<span class="hljs-keyword">if</span>(isFlag == <span class="hljs-keyword">true</span>) &#123;<br>			System.out.println(i);<br>		&#125;<br>		<span class="hljs-comment">//重置isFlag</span><br>		isFlag = <span class="hljs-keyword">true</span>;<br>	&#125;<br>	<br>&#125;<br><br><br></code></pre></td></tr></table></figure>

<p>优化1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">boolean</span> isFlag = <span class="hljs-keyword">true</span>;<br>		<span class="hljs-comment">//获取当前时间距离1970-01-01 00:00:00的毫秒数</span><br>		<span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>; i++) &#123;<br>			<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt; i;j++) &#123;<br>				<span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>) &#123;<br>					isFlag = <span class="hljs-keyword">false</span>;<br>					<span class="hljs-keyword">break</span>;<span class="hljs-comment">//优化一:只对本身非质数的自然数是有效的</span><br>				&#125;	<br>			&#125;<br>			<span class="hljs-keyword">if</span>(isFlag == <span class="hljs-keyword">true</span>) &#123;<br>				System.out.println(i);<br>			&#125;<br>			<span class="hljs-comment">//重置isFlag</span><br>			isFlag = <span class="hljs-keyword">true</span>;<br>		&#125;<br><br>		<span class="hljs-comment">//获取当前时间距离1970-01-01 00:00:00的毫秒数</span><br>		<span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>		<br>		System.out.println(end-start);<br>		<span class="hljs-comment">//break优化前24905</span><br>		<span class="hljs-comment">//break优化后2287</span><br>	&#125;<br></code></pre></td></tr></table></figure>

<p>优化2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	<br>	<span class="hljs-keyword">boolean</span> isFlag = <span class="hljs-keyword">true</span>;<br>	<span class="hljs-comment">//获取当前时间距离1970-01-01 00:00:00的毫秒数</span><br>	<span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>; i++) &#123;<br>		<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= Math.sqrt(i);j++) &#123;<br>		<span class="hljs-comment">/*</span><br><span class="hljs-comment">		 优化2：</span><br><span class="hljs-comment">		  	j &lt; Math.sqrt(i) 为什么？</span><br><span class="hljs-comment">			对本身是质数的自然数是有效的</span><br><span class="hljs-comment">		*/</span><br>			<span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>) &#123;<br>				isFlag = <span class="hljs-keyword">false</span>;<br>				<span class="hljs-keyword">break</span>;<span class="hljs-comment">//优化一:只对本身非质数的自然数是有效的</span><br>			&#125;	<br>		&#125;<br>		<span class="hljs-keyword">if</span>(isFlag == <span class="hljs-keyword">true</span>) &#123;<br>			System.out.println(i);<br>		&#125;<br>		<span class="hljs-comment">//重置isFlag</span><br>		isFlag = <span class="hljs-keyword">true</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//获取当前时间距离1970-01-01 00:00:00的毫秒数</span><br>	<span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>	<br>	System.out.println(end-start);<br>	<span class="hljs-comment">//break优化前:24905</span><br>	<span class="hljs-comment">//break优化后:2287</span><br>	<span class="hljs-comment">//优化2后:92</span><br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure>



<h5 id="5-1-5、特殊关键字break、continue的使用"><a href="#5-1-5、特殊关键字break、continue的使用" class="headerlink" title="5.1.5、特殊关键字break、continue的使用"></a>5.1.5、特殊关键字break、continue的使用</h5><table>
<thead>
<tr>
<th>关键字</th>
<th>使用范围</th>
<th>循环中使用的作用(不同点)</th>
<th>相同点</th>
</tr>
</thead>
<tbody><tr>
<td>break:</td>
<td>switch-case</td>
<td>结束当前循环</td>
<td>关键字后面不能声明执行语句</td>
</tr>
<tr>
<td></td>
<td>循环结构中</td>
<td></td>
<td></td>
</tr>
<tr>
<td>continue</td>
<td>循环结构中</td>
<td>结束当次循环</td>
<td>关键字后面不能声明执行语句</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>			<span class="hljs-keyword">if</span>(i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>			System.out.println(i);<br>		&#125;<br><br>结果：<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br> <br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>			<span class="hljs-keyword">if</span>(i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>				<span class="hljs-keyword">continue</span>;<br>			&#125;<br>			System.out.println(i);<br>		&#125;<br>结果：<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">9</span><br><span class="hljs-number">10</span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++) &#123;<br>			<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span>;j++) &#123;<br>				<span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>					<span class="hljs-keyword">break</span>;<br>					<span class="hljs-comment">//默认跳出包裹此关键字最近的一层循环。</span><br>				&#125;<br>				System.out.print(j);<br>			&#125;<br>			System.out.println();<br>		&#125;<br><br>	&#125;<br><br><br>结果：<br><span class="hljs-number">123</span><br><span class="hljs-number">123</span><br><span class="hljs-number">123</span><br><span class="hljs-number">123</span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++) &#123;<br>			<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span>;j++) &#123;<br>				<span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>					<span class="hljs-keyword">continue</span>;<br>					<span class="hljs-comment">//默认跳出包裹此关键字最近的一层循环的当次循环。</span><br>				&#125;<br>				System.out.print(j);<br>			&#125;<br>			System.out.println();<br>		&#125;<br><br>	&#125;<br><br><br>结果：<br><span class="hljs-number">123567910</span><br><span class="hljs-number">123567910</span><br><span class="hljs-number">123567910</span><br><span class="hljs-number">123567910</span><br><br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		label:<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++) &#123;<br>			<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span>;j++) &#123;<br>				<span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>					<span class="hljs-keyword">break</span> label;<br>					<span class="hljs-comment">//结束指定标识的一层循环结构。</span><br>				&#125;<br>				System.out.print(j);<br>			&#125;<br>			System.out.println();<br>		&#125;<br>	&#125;<br><br>结果：<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		label:<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++) &#123;<br>			<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span>;j++) &#123;<br>				<span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>					<span class="hljs-keyword">continue</span> label;<br>					<span class="hljs-comment">//结束指定标识的一层循环结构当次循环。</span><br>				&#125;<br>				System.out.print(j);<br>			&#125;<br>			System.out.println();<br>		&#125;<br>	&#125;<br><br>结果：<br><span class="hljs-number">123123123123</span><br></code></pre></td></tr></table></figure>

<p>质数方法二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<br>		<span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>		label:<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>; i++) &#123;<br>			<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= Math.sqrt(i);j++) &#123;<br>			<br>				<span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>) &#123;<br>					<span class="hljs-keyword">continue</span> label;<br>				&#125;	<br>			&#125;<br>			<span class="hljs-comment">//执行到此步骤的都是质数</span><br>			count++;<br>		&#125;<br><br>		<span class="hljs-comment">//获取当前时间距离1970-01-01 00:00:00的毫秒数</span><br>		<span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>		System.out.println(count);<br>		System.out.println(end-start);<br>		<span class="hljs-comment">//break优化前:24905</span><br>		<span class="hljs-comment">//break优化后:2287</span><br>		<span class="hljs-comment">//优化:92</span><br>        <span class="hljs-comment">//此时:62</span><br>	&#125;<br><br><br></code></pre></td></tr></table></figure>



<h3 id="5-2、项目一"><a href="#5-2、项目一" class="headerlink" title="5.2、项目一"></a>5.2、项目一</h3><p>家庭记账软件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>	<span class="hljs-keyword">boolean</span> isFlag = <span class="hljs-keyword">true</span>;<br>	<span class="hljs-comment">//用于记录用户收入支出和详情</span><br>	String details=<span class="hljs-string">&quot;收支\t账户金额\t\t收支金额\t\t说  明\n&quot;</span>;<br>	<span class="hljs-keyword">int</span> money;<br>	String info;<br>	<span class="hljs-comment">//初始金额</span><br>	<span class="hljs-keyword">int</span> balance = <span class="hljs-number">10000</span>;<br>	<span class="hljs-keyword">while</span>(isFlag) &#123;<span class="hljs-comment">//也可以写true</span><br>		System.out.println(<span class="hljs-string">&quot;---------------家庭收支记账软件----------------\n&quot;</span>);<br>		System.out.println(<span class="hljs-string">&quot;                 1 收支明细&quot;</span>);<br>		System.out.println(<span class="hljs-string">&quot;                 2 登记收入&quot;</span>);<br>		System.out.println(<span class="hljs-string">&quot;                 3 登记支出&quot;</span>);<br>		System.out.println(<span class="hljs-string">&quot;                 4 退出\n&quot;</span>);<br>		System.out.print(<span class="hljs-string">&quot;                 &lt;请输入1-4&gt;:&quot;</span>);<br><br>		<span class="hljs-keyword">char</span> selection = Utility.readMenuSelection();<br>		<br>		<span class="hljs-keyword">switch</span>(selection) &#123;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>				System.out.println(<span class="hljs-string">&quot;---------------当前收支明细记录----------------&quot;</span>);<br>				System.out.println(details);<br>				System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>				System.out.print(<span class="hljs-string">&quot;本次收入金额：&quot;</span>);<br>				money = Utility.readNumber();<br>				System.out.print(<span class="hljs-string">&quot;本次收入说明：&quot;</span>);<br>				info = Utility.readString();<br>				<br>				balance += money;<br>				<span class="hljs-comment">//处理details</span><br>				details += <span class="hljs-string">&quot;收入\t&quot;</span> + balance + <span class="hljs-string">&quot;\t\t&quot;</span> + money + <span class="hljs-string">&quot;\t\t&quot;</span> + info + <span class="hljs-string">&quot;\n&quot;</span>;<br>				<br>				<br>				System.out.println(<span class="hljs-string">&quot;-------------------登记完成--------------------&quot;</span>);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>				System.out.print(<span class="hljs-string">&quot;本次支出金额：&quot;</span>);<br>				money = Utility.readNumber();<br>				System.out.print(<span class="hljs-string">&quot;本次支出说明：&quot;</span>);<br>				info = Utility.readString();<br>				<br>				<br>				<span class="hljs-comment">//处理balance</span><br>				<span class="hljs-keyword">if</span>(balance &gt;= money) &#123;<br>					balance -= money;<br>					<span class="hljs-comment">//处理details</span><br>					details += <span class="hljs-string">&quot;支出\t&quot;</span> + balance + <span class="hljs-string">&quot;\t\t&quot;</span> + money + <span class="hljs-string">&quot;\t\t&quot;</span> + info + <span class="hljs-string">&quot;\n&quot;</span>;<br>				&#125;<span class="hljs-keyword">else</span> &#123;<br>					System.out.println(<span class="hljs-string">&quot;错误！超出账户额度！&quot;</span>);<br>				&#125;<br>				<br>				<br>				System.out.println(<span class="hljs-string">&quot;-------------------登记完成--------------------&quot;</span>);<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>				System.out.println(<span class="hljs-string">&quot;确认是否退出(Y/N):&quot;</span>);<br>				<span class="hljs-keyword">char</span> isExit = Utility.readConfirmSelection();<br>				<span class="hljs-keyword">if</span>(isExit == <span class="hljs-string">&#x27;Y&#x27;</span>) &#123;<br>					isFlag = <span class="hljs-keyword">false</span>;<span class="hljs-comment">//也可以break;</span><br>				&#125;<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<br>		<br>	&#125;<br>	<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>Utility.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test03;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/*Utility工具类：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">	将不同的功能封装为方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Utility</span></span>&#123;<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br><span class="hljs-comment">/*用于界面的选择。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">	该方法读取键盘，如果用户输入1到4的任意字符，方法返回值为输入的任意字符</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> <span class="hljs-title">readMenuSelection</span><span class="hljs-params">()</span></span>&#123;<br>		<span class="hljs-keyword">char</span> c;<br><br>		<span class="hljs-keyword">for</span>(;;)&#123;<br>			String str = readKeyBoard(<span class="hljs-number">1</span>);<br>			c = str.charAt(<span class="hljs-number">0</span>);<br>			<span class="hljs-keyword">if</span> (c !=<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; c !=<span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;4&#x27;</span>)&#123;<br>				System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入&quot;</span>);<br>			&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br><br>		&#125;<br>		<span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">用于支出和收入金额的输入，读取一个不超过4位数长度的整数，并将其作为方法的返回值</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">readNumber</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">int</span> n;<br><br>	<span class="hljs-keyword">for</span>(;;)&#123;<br>		String str = readKeyBoard(<span class="hljs-number">4</span>);<br><br>		<span class="hljs-keyword">try</span>&#123;<br>			n = Integer.parseInt(str);<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<span class="hljs-keyword">catch</span>(NumberFormatException e)&#123;<br>			System.out.print(<span class="hljs-string">&quot;数字输入有误，请重新输入：&quot;</span>);<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-comment">/*用于支出和收入说明的输入。用于读取从键盘输入的不超过8为字符串长度的输入值，</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">并将其作为方法的返回值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readString</span><span class="hljs-params">()</span></span>&#123;<br>	String str = readKeyBoard(<span class="hljs-number">8</span>);<br>	<span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-comment">/*用于确认选择的输入，从键盘读取&#x27;y&#x27;或者&#x27;n&#x27;,并将其作为返回值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> <span class="hljs-title">readConfirmSelection</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">char</span> c;<br>	<span class="hljs-keyword">for</span>(;;)&#123;<br>		String str = readKeyBoard(<span class="hljs-number">1</span>).toUpperCase();<br><br>		c = str.charAt(<span class="hljs-number">0</span>);<br><br>		<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;Y&#x27;</span> || c == <span class="hljs-string">&#x27;N&#x27;</span>)&#123;<br>			<span class="hljs-keyword">break</span>;<br><br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br><br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readKeyBoard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> limit)</span></span>&#123;<br>	String line = <span class="hljs-string">&quot;&quot;</span>;<br><br>	<span class="hljs-keyword">while</span> (scanner.hasNext())&#123;<br>		line = scanner.nextLine();<br><br>		<span class="hljs-keyword">if</span> (line.length()&lt;<span class="hljs-number">1</span> || line.length()&gt;limit)&#123;<br>			System.out.print(<span class="hljs-string">&quot;输入长度(不大于&quot;</span> + limit+ <span class="hljs-string">&quot;)错误，请重新输入&quot;</span>);<br>			<span class="hljs-keyword">continue</span>;<br>		&#125;<br>		<span class="hljs-keyword">break</span>;<br>	&#125;<br>	<span class="hljs-keyword">return</span> line;	<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="5-3、Eclipse"><a href="#5-3、Eclipse" class="headerlink" title="5.3、Eclipse"></a>5.3、Eclipse</h3><p>之前版本是字母顺序版本</p>
<p>后改为年</p>
<p><img src="https://www.picbed.cn/images/2021/05/16/1.png"></p>
<p><img src="https://www.picbed.cn/images/2021/05/16/2.png"></p>
<p><img src="https://www.picbed.cn/images/2021/05/16/3.png"></p>
<p><img src="https://www.picbed.cn/images/2021/05/16/4.png"></p>
<p>当视图乱七八糟时,重新设置</p>
<p><img src="https://www.picbed.cn/images/2021/05/16/5.png"></p>
<p><img src="https://www.picbed.cn/images/2021/05/16/6.png"></p>
<p>勿忘记命名规范</p>
<p><a href="https://www.cnblogs.com/wkfvawl/p/12172756.html">java命名规范</a></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之面向对象(中)</title>
    <url>/2021/05/24/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD)/</url>
    <content><![CDATA[<h1 id="8、面向对象编程（中）"><a href="#8、面向对象编程（中）" class="headerlink" title="8、面向对象编程（中）"></a>8、面向对象编程（中）</h1><h2 id="8-1、面向对象特征之二：继承性"><a href="#8-1、面向对象特征之二：继承性" class="headerlink" title="8.1、面向对象特征之二：继承性"></a>8.1、面向对象特征之二：继承性</h2><p><img src="https://www.picbed.cn/images/2021/05/25/7.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm03;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 一、继承性的好处:</span><br><span class="hljs-comment"> * 		① 减少了代码的冗余，提供了代码的复用性</span><br><span class="hljs-comment"> * 		② 便于功能的扩展</span><br><span class="hljs-comment"> * 		③ 为之后多态性的使用，提供了前提</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 二、继承性的格式:</span><br><span class="hljs-comment"> * 			class A extends B&#123;&#125;</span><br><span class="hljs-comment"> * 		A:子类、派生类、subclass</span><br><span class="hljs-comment"> * 		B:父类、超类、基类、superclass</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> * 		2.1、体现:</span><br><span class="hljs-comment"> * 			一旦子类A继承父类B以后，子类A中就获取了父类B中的声明的结构: 属性、方法</span><br><span class="hljs-comment"> * 				所有的属性和方法。</span><br><span class="hljs-comment"> * 		特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> * 		只是因为封装性的影响，使得子类不能直接调用父类的结构而已。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 		2.2、子类继承父类以后，还可以声明自己特有的属性或方法：</span><br><span class="hljs-comment"> * 				实现功能的拓展。</span><br><span class="hljs-comment"> * 		子类和父类的关系，不同于子集和集合的关系。</span><br><span class="hljs-comment"> * 		extends: 延展、扩展</span><br><span class="hljs-comment"> * 三、Java中关于继承性的规定:</span><br><span class="hljs-comment"> * 		1、一个类可以被多个子类继承。</span><br><span class="hljs-comment"> * 		2、Java中类的单继承性：一个类只能有一个父类。</span><br><span class="hljs-comment"> * 		3、子父类是相对的概念。父类的父类是间接父类。</span><br><span class="hljs-comment"> * 		4、子类直接继承的父类，称为：直接父类。</span><br><span class="hljs-comment"> * 			间接继承的父类称为：间接父类</span><br><span class="hljs-comment"> * 		5、子类继承父类以后，就获取了父类以及所有间接父类中声明的属性和方法。</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExtendsTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Person p1 = <span class="hljs-keyword">new</span> Person();<br>		<br>		p1.age = <span class="hljs-number">1</span>;<br>		<br>		Student s1 = <span class="hljs-keyword">new</span> Student();<br>		s1.setId(<span class="hljs-number">10</span>);<br>		s1.toString();<br>		s1.eat();<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Object类的理解:</p>
<p>光标放在类上Ctrl+T即可查看继承树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">/ * <br> *	四、Object类的理解:<br> *		<span class="hljs-number">1</span>、如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类<br> *		<span class="hljs-number">2</span>、所有的Java类(除java.lang.Object类之外)都直接或间接的继承于java.lang.Object类<br> * 		<span class="hljs-number">3</span>、意味着，所有的Java类具有java.lang.Object类声明的功能。<br></code></pre></td></tr></table></figure>



<h2 id="8-2、Eclipse-Debug的使用"><a href="#8-2、Eclipse-Debug的使用" class="headerlink" title="8.2、Eclipse Debug的使用"></a>8.2、Eclipse Debug的使用</h2><table>
<thead>
<tr>
<th>操作</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>step into 跳入(F5)</td>
<td>进入当前行所调用的方法中</td>
</tr>
<tr>
<td>step over 跳过(F6)</td>
<td>执行完当前行的语句，进入下一行</td>
</tr>
<tr>
<td>step return 跳回(F7)</td>
<td>执行完当前行所在的方法，进入下一行</td>
</tr>
<tr>
<td>drop to frame</td>
<td>回到当前行所在方法的第一行</td>
</tr>
<tr>
<td>resume 恢复</td>
<td>执行完当前行所在断点的所有代码，进入下一个断点，如果没有就结束</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm03;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 如何调试程序:</span><br><span class="hljs-comment"> * 1、System.out.println();</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DebugTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>		System.out.println(arr);<br>		<br>		<span class="hljs-keyword">char</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[] &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>		System.out.println(arr1);<br>	&#125;<br>&#125;<br><span class="hljs-comment">//结果</span><br>[I@182decdb<br>abc<br><br></code></pre></td></tr></table></figure>

<p>通过debug得知，调用的是这两个是不同的方法，所以结果不同。</p>
<p>Debug as 选择Run Confugurations…</p>
<p>选择JRE 选择 Alternate  JRE:选择jdk里面的jre</p>
<p> 选择后面的Installed JREs…</p>
<p>先remove再Add 点击JDK目录</p>
<h2 id="8-3、方法的重写-override-overwrite"><a href="#8-3、方法的重写-override-overwrite" class="headerlink" title="8.3、方法的重写(override/overwrite)"></a>8.3、方法的重写(override/overwrite)</h2><p>定义:</p>
<p>在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。</p>
<p>要求：</p>
<ul>
<li>子类重写的方法必须和父类被重写的方法具有相同的方法名称、参数列表</li>
<li>子类重写的方法的返回值类型不能大于父类被重写的方法的返回值类型</li>
<li>子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限<ul>
<li>子类不能重写父类中声明为private权限的方法</li>
</ul>
</li>
<li>子类方法抛出的异常不能大于父类被重写方法的异常</li>
</ul>
<p>注意：</p>
<p>子类与父类中同名同参数的方法必须同时声明为非static的(即为重写),或者同时声明为static的(不是重写)，因为static方法是属于类的，子类无法覆盖父类的方法。</p>
<p>Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm03;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>	String name;<br>	<span class="hljs-keyword">int</span> age;<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.name = name;<br>		<span class="hljs-keyword">this</span>.age = age;<br>		<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.id = id;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>Student类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm03;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-comment">//	String name;</span><br><span class="hljs-comment">//	int age;</span><br>	String major;<br>	<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String major)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.major = major;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age,String major)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.name = name;<br>		<span class="hljs-keyword">this</span>.age = age;<br>		<span class="hljs-keyword">this</span>.major = major;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;学习&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;学生应该多吃有营养的食物&quot;</span>);<br>		<br>		<br>	&#125;<span class="hljs-comment">//对父类中的eat()进行了重写</span><br>	<br>	<br><span class="hljs-comment">//	public void sleep() &#123;</span><br><span class="hljs-comment">//		System.out.println(&quot;睡觉&quot;);</span><br><span class="hljs-comment">//	&#125;</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>PersonTest类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm03;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 方法的重写(override/overwrite)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 1、重写: 子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 2、应用:重写以后，当创建子类对象以后，通过子类对象调用子父类中同名同参数的方法时，实际执行的是子类重写父类的方法。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 3、重写的规定：</span><br><span class="hljs-comment"> * 			方法的声明： 权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型&#123;</span><br><span class="hljs-comment"> * 								//方法体</span><br><span class="hljs-comment"> * 						&#125;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 			约定俗成：</span><br><span class="hljs-comment"> * 					子类中的叫重写的方法，父类中的叫被重写的方法</span><br><span class="hljs-comment"> * 					① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</span><br><span class="hljs-comment"> * 					② 子类重写的方法的权限修饰符 不小于父类被重写的方法的权限修饰符</span><br><span class="hljs-comment"> * 							&gt;特殊情况: </span><br><span class="hljs-comment"> * 								子类不能重写父类中声明为private权限的方法</span><br><span class="hljs-comment"> * 					</span><br><span class="hljs-comment"> * 					③ 返回值类型：</span><br><span class="hljs-comment"> * 						&gt; 父类被重写的方法的返回值类型是void,则子类重写的方法的返回值类型只能是void</span><br><span class="hljs-comment"> * 						&gt; 父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或者A类的子类。</span><br><span class="hljs-comment"> * 						&gt; 父类被重写的方法的返回值类型是基本数据类型(比如:double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是:double)。</span><br><span class="hljs-comment"> * 	</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 					④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型。(具体放到异常处理时候讲)</span><br><span class="hljs-comment"> * 					</span><br><span class="hljs-comment"> * 				</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * ********************************************************************************************************</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 	</span><br><span class="hljs-comment"> * 			子类和父类中的同名同参数的	方法 要么都声明为非static的(考虑重写)，要么都声明为static的(不是重写)。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 面试题：区分方法的重载与重写</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Student s = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;计算机科学与技术&quot;</span>);<br>		<br>		s.eat();<br>		<br>		<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<h2 id="8-4、四种访问权限修饰符"><a href="#8-4、四种访问权限修饰符" class="headerlink" title="8.4、四种访问权限修饰符"></a>8.4、四种访问权限修饰符</h2><p>Java权限修饰符public、protected、private置于类的成员定义前，用来限定对象对该类成员的访问权限</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>类内部</th>
<th>同一个包</th>
<th>不同包的子类</th>
<th>同一个工程</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>yes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>(缺省)</td>
<td>yes</td>
<td>yes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
</tbody></table>
<p>对于class的权限修饰只可以用public和default(缺省)</p>
<ul>
<li>public类可以在任意地方被访问</li>
<li>default类只可以被同一个包内部的类访问。</li>
</ul>
<p>demo04包下</p>
<p>Order.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm04;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 体会4种不同的权限修饰</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>&#123;<br>	<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> orderPrivate;<br>	<span class="hljs-keyword">int</span> orderDefault;<br>	<span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> orderProtected;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> orderPublic;<br>	<br>	<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodPrivate</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodDefault</span><span class="hljs-params">()</span> </span>&#123;<br>	<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodProtected</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodPublic</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>Ordertest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm04;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 体会4种不同的权限修饰</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>&#123;<br>	<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> orderPrivate;<br>	<span class="hljs-keyword">int</span> orderDefault;<br>	<span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> orderProtected;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> orderPublic;<br>	<br>	<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodPrivate</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodDefault</span><span class="hljs-params">()</span> </span>&#123;<br>	<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodProtected</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodPublic</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>demo05包下</p>
<p>OrderTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm05;<br><br><span class="hljs-keyword">import</span> com.test.dm04.Order;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		 Order order = <span class="hljs-keyword">new</span> Order();<br>		 <br>		 order.orderPublic = <span class="hljs-number">1</span>;<br>		 order.methodPublic();<br>		 <br>		 <br>		<span class="hljs-comment">//不同包下的普通类（非子类）要使用Order类， 不可调用声明为private、缺省、protected权限的属性、方法。</span><br><span class="hljs-comment">//		 order.orderPrivate = 1;</span><br><span class="hljs-comment">//		 order.orderDefault = 2;</span><br><span class="hljs-comment">//		 order.orderProtected = 3;</span><br><span class="hljs-comment">//		</span><br><span class="hljs-comment">//		 order.methodPrivate();</span><br><span class="hljs-comment">//		 order.methodDefault();</span><br><span class="hljs-comment">//		 order.methodProtected();</span><br><span class="hljs-comment">//	</span><br>	<br>			<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>SubOrder.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm05;<br><br><span class="hljs-keyword">import</span> com.test.dm04.Order;<br><span class="hljs-comment">//不同包里</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubOrder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Order</span> </span>&#123;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>		orderProtected = <span class="hljs-number">1</span>;<br>		orderPublic = <span class="hljs-number">2</span>;<br>		<br>		methodProtected();<br>		methodPublic();<br><span class="hljs-comment">//		在不同的包的子类中，不能调用Order类中声明为private和缺省权限的属性、方法</span><br>		<br><span class="hljs-comment">//		orderDefault = 3;</span><br><span class="hljs-comment">//		orderPrivate = 4;</span><br><span class="hljs-comment">//		</span><br><span class="hljs-comment">//		methodDefault();</span><br><span class="hljs-comment">//		methodPrivate();</span><br>		<br>		<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h2 id="8-5、super关键字的使用"><a href="#8-5、super关键字的使用" class="headerlink" title="8.5、super关键字的使用"></a>8.5、super关键字的使用</h2><p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm05;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>	String name;<br>	<span class="hljs-keyword">int</span> age;<br>	<span class="hljs-keyword">int</span> id = <span class="hljs-number">1001</span>;<span class="hljs-comment">//身份证号</span><br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;我无处不在！！！&quot;</span>);<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.name  = name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>(name);<br>		<span class="hljs-keyword">this</span>.age = age;<br>		<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">walk</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;人走路&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.id = id;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm05;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-comment">//	String name;</span><br><span class="hljs-comment">//	int age;</span><br>	String major;<br>	<span class="hljs-keyword">int</span> id = <span class="hljs-number">1002</span>;<span class="hljs-comment">//学号</span><br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String major)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.major = major;<br>	&#125;<br>	<br>	<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age,String major)</span> </span>&#123;<br><span class="hljs-comment">//		this.name = name;</span><br><span class="hljs-comment">//		this.age = age;</span><br>		<span class="hljs-keyword">super</span>(name,age);<br>		<span class="hljs-keyword">this</span>.major = major;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;学生学习知识&quot;</span>);<br>	&#125;<br><br>	<span class="hljs-meta">@Override</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;学生应该多吃有营养的食物&quot;</span>);<br>		<br>	&#125;<br>		<br>	<span class="hljs-comment">//对父类中的eat()进行了重写</span><br>	<br>	<br><span class="hljs-comment">//	public void sleep() &#123;</span><br><span class="hljs-comment">//		System.out.println(&quot;睡觉&quot;);</span><br><span class="hljs-comment">//	&#125;</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.eat();<br>		<span class="hljs-keyword">super</span>.eat();<br>		<br>		walk();<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>		<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;name = &quot;</span>+ <span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;,age = &quot;</span> + <span class="hljs-keyword">super</span>.age);<br>		System.out.println(<span class="hljs-string">&quot;id = &quot;</span>+ id);<span class="hljs-comment">//省略了this.id</span><br>		System.out.println(<span class="hljs-string">&quot;id = &quot;</span>+ <span class="hljs-keyword">super</span>.id);<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>SuperTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm05;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * super关键字的使用</span><br><span class="hljs-comment"> * 1、super:理解为，父类的</span><br><span class="hljs-comment"> * 2、super可以用来调用：属性、方法、构造器</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 3、super的使用：调用属性和方法</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> *    3.1 我们可以在子类的方法或构造器中，通过使用“super.属性”或&quot;super.方法&quot;的方式，显式的调用父类中声明的属性或方法。</span><br><span class="hljs-comment"> *    但是，通常情况下，我们习惯省略&quot;super.&quot;</span><br><span class="hljs-comment"> * 	  3.2 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用“super.属性”的方式，表明调用的是父类中声明的属性。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 	  3.3 特殊情况：</span><br><span class="hljs-comment"> * 			当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用“super.方法”的方式，表明调用的是父类中被重写的方法。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 4、super调用构造器</span><br><span class="hljs-comment"> * 	  4.1 我们可以在子类的构造器中显式的使用“super(形参列表)”的方式，调用父类中声明的指定的构造器</span><br><span class="hljs-comment"> * 	  4.2 “super(形参列表)”的使用，必须声明在子类构造器的首行！</span><br><span class="hljs-comment"> *    4.3 我们在类的构造器中，针对于&quot;this(形参列表)&quot; 或  “super(形参列表)”只能二选一，不能同时出现</span><br><span class="hljs-comment"> *    4.4 在构造器的首行，没有显式的声明&quot;this(形参列表)&quot; 或  “super(形参列表)”,则默认调用的是父类中空参的构造器：super();</span><br><span class="hljs-comment"> *    4.5 在类的多个构造器中，至少有一个类的构造器中使用了“super(形参列表)”。调用父类中的构造器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Student s = <span class="hljs-keyword">new</span> Student();<br>		s.show();<br>		<br>		System.out.println();<br>		<br>		s.info();<br>		Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;IT&quot;</span>);<br>		s1.show();<br>		<br>		System.out.println(<span class="hljs-string">&quot;********************&quot;</span>);<br>		<br>		Student s2 = <span class="hljs-keyword">new</span> Student();<br>	&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<h2 id="8-6、子类对象实例化过程"><a href="#8-6、子类对象实例化过程" class="headerlink" title="8.6、子类对象实例化过程"></a>8.6、子类对象实例化过程</h2><p><img src="https://www.picbed.cn/images/2021/05/27/8.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm05;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 子类对象实例化的全过程</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 1、从结果上来看:	(继承性)</span><br><span class="hljs-comment"> * 		子类继承父类以后，就获取了父类中声明的属性或方法。</span><br><span class="hljs-comment"> * 		创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 2、从过程上来看:</span><br><span class="hljs-comment"> * 		当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，</span><br><span class="hljs-comment"> * 	直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，</span><br><span class="hljs-comment"> * 子类对象才考虑进行调用。</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 明确：</span><br><span class="hljs-comment"> * 		虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InstanceTest</span> </span>&#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<h2 id="8-7、面向对象特征之三：多态性"><a href="#8-7、面向对象特征之三：多态性" class="headerlink" title="8.7、面向对象特征之三：多态性"></a>8.7、面向对象特征之三：多态性</h2><p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm06;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>	String name;<br>	<span class="hljs-keyword">int</span> age;<br>	<span class="hljs-keyword">int</span> id = <span class="hljs-number">1001</span>;<span class="hljs-comment">//身份证号</span><br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.name  = name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>(name);<br>		<span class="hljs-keyword">this</span>.age = age;<br>		<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">walk</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;人走路&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.id = id;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<p>Man.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm06;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>		<br>		<span class="hljs-keyword">boolean</span> isSmoking;<br>		<span class="hljs-keyword">int</span> id = <span class="hljs-number">1002</span>;<br>		<br>		<br>		<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">earnMoney</span><span class="hljs-params">()</span> </span>&#123;<br>			System.out.println(<span class="hljs-string">&quot;男人负责挣钱养家&quot;</span>);<br>		&#125;<br>			<br>		<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>			System.out.println(<span class="hljs-string">&quot;吃肉&quot;</span>);<br>		&#125;<br>		<br>		<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">walk</span><span class="hljs-params">()</span> </span>&#123;<br>			System.out.println(<span class="hljs-string">&quot;男人走路&quot;</span>);<br>		&#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>



<p>Woman.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm06;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>	<br>	<span class="hljs-keyword">boolean</span> isBeauty;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goShopping</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;女人喜欢购物&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;少吃肉，减肥&quot;</span>);<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">walk</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;女人走路&quot;</span>);<br>	&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>



<p>PersonTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm06;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 面向对象特征之三:多态性</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 1、理解多态性，可以理解为一个事物的多种形态。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 2、何为多态性: </span><br><span class="hljs-comment"> * 		对象多态性: 父类的引用指向子类的对象(或子类的对象赋给父类的引用)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 3、多态的使用: 虚拟方法调用</span><br><span class="hljs-comment"> * 		有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 	总结：</span><br><span class="hljs-comment"> * 		编译，看左边，运行，看右边。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 4、多态性的使用前提：</span><br><span class="hljs-comment"> * 		① 要有类的继承关系</span><br><span class="hljs-comment"> * 		② 要有方法的重写</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 5、对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Person p1 = <span class="hljs-keyword">new</span> Person();<br>		<br>		p1.eat();<br>		<br>		Man man = <span class="hljs-keyword">new</span> Man();<br>		<br>		man.eat();<br>		<br>		man.age = <span class="hljs-number">25</span>;<br>		man.earnMoney();<br>		<br><span class="hljs-comment">//***************************************************</span><br>		System.out.println(<span class="hljs-string">&quot;**************************************&quot;</span>);<br>		<span class="hljs-comment">//对象多态性: 父类的引用指向子类的对象</span><br>		Person p2 = <span class="hljs-keyword">new</span> Man();<br>		<br><span class="hljs-comment">//		Person p3 = new Woman();</span><br>		<br>		<span class="hljs-comment">//多态的使用: 当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法---虚拟方法调用</span><br>		<br>		p2.eat();<br>		<br>		<br>		p2.walk();<br>		<br>		<span class="hljs-comment">//p2.earnMoney();The method earnMoney() is undefined for the type Person</span><br>		System.out.println(p2.id);<br>		<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>AnimalTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm06;<br><span class="hljs-comment">//多态性的使用，举例一：</span><br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimalTest</span> </span>&#123;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		AnimalTest test = <span class="hljs-keyword">new</span> AnimalTest();<br>		test.func(<span class="hljs-keyword">new</span> Dog());<br>		test.func(<span class="hljs-keyword">new</span> Cat());<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(Animal animal)</span> </span>&#123;<span class="hljs-comment">//Animal animal = new Dog();</span><br>		animal.eat();<br>		animal.shout();<br>	&#125;<br>	<span class="hljs-comment">//省得去重载方法</span><br><span class="hljs-comment">//	public void func(Dog dog) &#123;</span><br><span class="hljs-comment">//		dog.eat();</span><br><span class="hljs-comment">//		dog.shout();</span><br><span class="hljs-comment">//	&#125;</span><br><span class="hljs-comment">//	public void func(Cat cat) &#123;</span><br><span class="hljs-comment">//		cat.eat();</span><br><span class="hljs-comment">//		cat.shout();</span><br><span class="hljs-comment">//	&#125;</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;动物，进食&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;动物，叫&quot;</span>);<br>	&#125;<br>	<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;狗吃骨头&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;汪汪汪&quot;</span>);<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;喵喵喵&quot;</span>);<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//举例二：</span><br>	<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span></span>&#123;<br>		<br>		<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>			<br>		&#125;<br>		<br>	&#125;<br>	<br><span class="hljs-comment">//举例三:</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span></span>&#123;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doData</span><span class="hljs-params">(Connection conn)</span> </span>&#123;<span class="hljs-comment">//conn = new MySQLConnection();/ conn = new OracleConnection();</span><br>		<span class="hljs-comment">//规范的步骤去操作数据。</span><br><span class="hljs-comment">//		conn.method1();</span><br><span class="hljs-comment">//		conn.method2();</span><br><span class="hljs-comment">//		conn.method3();</span><br>		<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="虚拟方法调用再理解"><a href="#虚拟方法调用再理解" class="headerlink" title="虚拟方法调用再理解"></a>虚拟方法调用再理解</h3><p>虚拟方法调用（Virtual Method Invocation）</p>
<p>正常的方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Person e = <span class="hljs-keyword">new</span> Person();<br>e.getInfo();<br>Student e = <span class="hljs-keyword">new</span> Student();<br>e.getInfo();<br></code></pre></td></tr></table></figure>

<p>虚拟方法调用(多态情况下)</p>
<p>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Person e = <span class="hljs-keyword">new</span> Student();<br>e.getInfo(); <span class="hljs-comment">//调用Student类的getInfo()方法</span><br></code></pre></td></tr></table></figure>

<p>编译时类型和运行时类型</p>
<p>编译时e为Person类型，而方法的调用时在运行时确定的，所以调用的是Student类的getInfo()方法。 ——-<strong>动态绑定</strong></p>
<p>面试题: 多态是编译时行为还是运行时行为？</p>
<p>运行时行为</p>
<p>小结： 方法的重载和重写</p>
<p>1、二者的定义细节： 略</p>
<p>2、从编译和运行的角度看：</p>
<p>​    重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。</p>
<p>所以： 对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为”早绑定“ 或 ”静态绑定“；</p>
<p>而对于多态，只有等到方法调用的那一刻，编译器才会确定所要调用的具体方法，这称为”晚绑定“ 或 ”动态绑定“</p>
<p>引用Bruce Eckel的话： ”不要犯傻，如果它不是晚绑定，它就不是多态。“</p>
<h3 id="向下转型的使用"><a href="#向下转型的使用" class="headerlink" title="向下转型的使用"></a>向下转型的使用</h3>]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之面向对象(上)</title>
    <url>/2021/05/19/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%8A)/</url>
    <content><![CDATA[<h1 id="7、面向对象编程（上）"><a href="#7、面向对象编程（上）" class="headerlink" title="7、面向对象编程（上）"></a>7、面向对象编程（上）</h1><p><strong>学习</strong>面向对象内容的三条主线</p>
<p>1、Java类及类的成员</p>
<p>2、面向对象的三大特征</p>
<p>3、其他关键字</p>
<ul>
<li><p>Java类及类的成员</p>
<ul>
<li>属性、方法、构造器；代码块、内部类</li>
</ul>
</li>
<li><p>面向对象的三大特征</p>
<ul>
<li>封装性、继承性、多态性、（抽象性）</li>
</ul>
</li>
<li><p>其他关键字</p>
<ul>
<li>this\super\static\final\abstract\interface\package\import等</li>
</ul>
</li>
</ul>
<h2 id="7-1、面向过程（POP）和面向对象（OOP）"><a href="#7-1、面向过程（POP）和面向对象（OOP）" class="headerlink" title="7.1、面向过程（POP）和面向对象（OOP）"></a>7.1、面向过程（POP）和面向对象（OOP）</h2><p>二者都是一种思想，面向对象是相对于面向对象而言的。面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p>
<p>面向对象更加强调运用人类在日常思维逻辑中采用的思想方法和原则，如抽象、分类、继承、聚合、多态等。</p>
<p>面向对象的三大特征：</p>
<p>封装 （Encapsulation）</p>
<p>继承 （Inheritance）</p>
<p>多态  (Polymorphism)</p>
<p>面向对象：Object Oriented Programming</p>
<p>面向过程： Procedure Oriented Programming</p>
<p>二、“人把大象装进冰箱”</p>
<p>1、面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做</p>
<ul>
<li>把冰箱门打开</li>
<li>抬起大象，塞进冰箱</li>
<li>把冰箱门关闭</li>
</ul>
<p>2、面向对象：强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p>
<p>人{</p>
<p>​        打开（冰箱）</p>
<p>​                冰箱.打开();</p>
<p>​        抬起（大象）{</p>
<p>​                大象.进入（冰箱);    </p>
<p>}</p>
<p>}</p>
<p>冰箱 {</p>
<p>​        冰箱.打开();</p>
<p>​        冰箱.闭合（）；</p>
<p>}</p>
<p>大象 {</p>
<p>​        进入（冰箱）{</p>
<p>​    }</p>
<p>}</p>
<p>面向对象的思想概述</p>
<p>程序员从面向过程的执行者转化成了面向对象的指挥者</p>
<p>面向对象分析方法分析问题的思路和步骤：</p>
<ul>
<li> 根据问题需要，选择问题所针对的现实世界中的实体。</li>
<li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。</li>
<li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li>
<li>把类实例化成计算机世界中的对象，对象是计算机世界中解决问题的最终工具。</li>
</ul>
<h2 id="7-2、类和对象"><a href="#7-2、类和对象" class="headerlink" title="7.2、类和对象"></a>7.2、类和对象</h2><p>面向对象的思想概述：</p>
<p>类（Class）和 对象（Object）是面向对象的核心概念。</p>
<ul>
<li>类是对一类事物的描述，是抽象的、概念上的定义</li>
<li>对象是实际存在的该类事物的每个个体，因而也被称为实例（instance）</li>
</ul>
<p>“万事万物皆对象”</p>
<p>可以理解为：<strong>类=抽象概念的人；对象=实实在在的某个人</strong></p>
<p>面向对象程序设计的重点是<strong>类的设计</strong></p>
<p>类的设计，<strong>其实就是类的成员的设计</strong></p>
<h3 id="7-1、类的结构：属性和方法"><a href="#7-1、类的结构：属性和方法" class="headerlink" title="7.1、类的结构：属性和方法"></a>7.1、类的结构：属性和方法</h3><p>属性： 对应类中的成员变量</p>
<p>行为：对应类中的成员方法</p>
<blockquote>
<p>Field = 属性 = 成员变量，    Method = (成员)方法 = 函数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 设计类，其实就是设计类的成员</span><br><span class="hljs-comment"> * 属性 = 成员变量 = field = 域、字段</span><br><span class="hljs-comment"> * 方法 = 成员方法 = 函数 = method</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>

<p><img src="https://www.picbed.cn/images/2021/05/20/1.png"></p>
<p>Java类及类的成员</p>
<p>如何使用Java类？</p>
<p>Java类的实例化，即创建类的对象</p>
<p>二、类和对象的使用（面向对象思想落地的实现）：</p>
<p>1、创建类，设计类的成员</p>
<p>2、创建类的对象</p>
<p>3、通过“对象.属性“ 或”对象.方法”调用对象的结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><br><span class="hljs-comment">//创建类的对象 = 类的实例化 = 实例化类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<span class="hljs-comment">//创建Person类的对象</span><br>		Person p1 = <span class="hljs-keyword">new</span> Person();<br>		<span class="hljs-comment">//类似Scanner scanner = new Scanner(System.in);</span><br>		<br>		<br>		<span class="hljs-comment">//调用对象的结构： 属性、方法</span><br>		<span class="hljs-comment">//调用属性： “对象.属性”</span><br>	<br>		p1.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>		p1.isMale = <span class="hljs-keyword">true</span>;<br>		System.out.println(p1.name);<br>		<br>		<span class="hljs-comment">//调用方法：“对象.方法”</span><br>		p1.eat();<br>		p1.sleep();<br>		p1.talk(<span class="hljs-string">&quot;Chinese&quot;</span>);<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>	<br>	<span class="hljs-comment">//属性</span><br>	String name;<br>	<span class="hljs-keyword">int</span> age = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">boolean</span> isMale;<br>	<span class="hljs-comment">//方法</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">talk</span><span class="hljs-params">(String language)</span> </span>&#123;&#125;<br>	<br>&#125;<br></code></pre></td></tr></table></figure>

<p>三、如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。(非static的）</p>
<p>意味着： 如果我们修改一个对象的属性a,则不影响另外一个对象属性a的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><br><span class="hljs-comment">//创建类的对象 = 类的实例化 = 实例化类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<span class="hljs-comment">//创建Person类的对象</span><br>		Person p1 = <span class="hljs-keyword">new</span> Person();<br>		<span class="hljs-comment">//类似Scanner scanner = new Scanner(System.in);</span><br>		<br>		<br>		<span class="hljs-comment">//调用对象的结构： 属性、方法</span><br>		<span class="hljs-comment">//调用属性： “对象.属性”</span><br>	<br>		p1.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>		p1.isMale = <span class="hljs-keyword">true</span>;<br>		System.out.println(p1.name);<br>		<br>		<span class="hljs-comment">//调用方法：“对象.方法”</span><br>		p1.eat();<br>		p1.sleep();<br>		p1.talk(<span class="hljs-string">&quot;Chinese&quot;</span>);<br>		<br>		<br>		Person p2 = <span class="hljs-keyword">new</span> Person();<br>		System.out.println(p2.name);<span class="hljs-comment">//null</span><br>		System.out.println(p2.isMale);<span class="hljs-comment">//false</span><br>		<br>		<span class="hljs-comment">//将p1变量保存的对象地址值赋给p3,导致p1和p3指向了堆空间中的同一个对象实体。</span><br>		Person p3 = p1;<br>		System.out.println(p3.name);<span class="hljs-comment">//Tom</span><br>		p3.age = <span class="hljs-number">10</span>;<br>		System.out.println(p1.age);<span class="hljs-comment">//10</span><br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>	<br>	<span class="hljs-comment">//属性</span><br>	String name;<br>	<span class="hljs-keyword">int</span> age = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">boolean</span> isMale;<br>	<span class="hljs-comment">//方法</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">talk</span><span class="hljs-params">(String language)</span> </span>&#123;&#125;<br>	<br>&#125;<br></code></pre></td></tr></table></figure>

<p>四、对象的内存解析</p>
<p><img src="https://www.picbed.cn/images/2021/05/20/2.png"></p>
<p><img src="https://www.picbed.cn/images/2021/05/20/3.png"></p>
<h3 id="7-2、属性与局部变量对比"><a href="#7-2、属性与局部变量对比" class="headerlink" title="7.2、属性与局部变量对比"></a>7.2、属性与局部变量对比</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 类中属性的使用</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 属性(成员变量) VS 局部变量</span><br><span class="hljs-comment"> * 1、相同点</span><br><span class="hljs-comment"> * 		1.1、定义变量的格式;数据类型 变量名 = 变量值</span><br><span class="hljs-comment"> * 		1.2、先声明，后使用</span><br><span class="hljs-comment"> * 		1.3、变量都有其对应的作用域</span><br><span class="hljs-comment"> * 2、不同点</span><br><span class="hljs-comment"> * 		2.1、在类中声明的位置的不同</span><br><span class="hljs-comment"> * 		属性：直接定义在类的一对&#123;&#125;内</span><br><span class="hljs-comment"> * 		局部变量：</span><br><span class="hljs-comment"> * 			声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</span><br><span class="hljs-comment"> *		</span><br><span class="hljs-comment"> *		2.2、关于权限修饰符的不同</span><br><span class="hljs-comment"> *		属性：</span><br><span class="hljs-comment"> *			可以在声明属性时，指明其权限，使用权限修饰符。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *			常用的权限修饰符：</span><br><span class="hljs-comment"> *					private、public、缺省、protected------&gt;封装性</span><br><span class="hljs-comment"> *			目前。大家声明属性时，都使用缺省就可以了。</span><br><span class="hljs-comment"> *		局部变量：</span><br><span class="hljs-comment"> *			不可以使用权限修饰符。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *		2.3、默认初始化值的情况:</span><br><span class="hljs-comment"> *		属性：</span><br><span class="hljs-comment"> *			类的属性，根据其类型，都有默认初始化值。</span><br><span class="hljs-comment"> *			整型(byte、short、int、long): 0</span><br><span class="hljs-comment"> *			浮点型(float、double): 0.0</span><br><span class="hljs-comment"> *			字符型(char): 0 (或者&#x27;\u0000&#x27;)</span><br><span class="hljs-comment"> *			布尔型(boolean): false</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *			引用数据类型(类、数组、接口): null</span><br><span class="hljs-comment"> *			</span><br><span class="hljs-comment"> *		局部变量:</span><br><span class="hljs-comment"> *			没有默认初始化值。</span><br><span class="hljs-comment"> *			意味着，我们在调用局部变量之前，一定要显式赋值。</span><br><span class="hljs-comment"> *			特别地:形参在调用时，我们赋值即可。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *		2.4、在内存中加载的位置:</span><br><span class="hljs-comment"> *		属性: </span><br><span class="hljs-comment"> *			加载到堆空间中(非static)</span><br><span class="hljs-comment"> *		局部变量:</span><br><span class="hljs-comment"> *			加载到栈空间</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTest</span> </span>&#123;<br><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<br>	&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>	<span class="hljs-comment">//属性(或成员变量)</span><br>	<span class="hljs-keyword">private</span> String name;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>	<span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> isMale;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">talk</span><span class="hljs-params">(String language)</span> </span>&#123;<span class="hljs-comment">//此处的language：形参,属于局部变量</span><br>		System.out.println(<span class="hljs-string">&quot;我们使用&quot;</span>+language+<span class="hljs-string">&quot;进行交流&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		String food = <span class="hljs-string">&quot;烙饼&quot;</span>;<span class="hljs-comment">//声明定义在方法内，是局部变量</span><br>		System.out.println(<span class="hljs-string">&quot;北方人喜欢吃&quot;</span>+food);<br>	&#125;<br>	<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="7-3、类中的方法-method"><a href="#7-3、类中的方法-method" class="headerlink" title="7.3、类中的方法(method)"></a>7.3、类中的方法(method)</h3><p>方法的分类：按照是否有形参及返回值</p>
<table>
<thead>
<tr>
<th></th>
<th>无返回值</th>
<th>有返回值</th>
</tr>
</thead>
<tbody><tr>
<td>无形参</td>
<td>void 方法名(){}</td>
<td>返回值的类型 方法名(){}</td>
</tr>
<tr>
<td>有形参</td>
<td>void 方法名(形参列表){}</td>
<td>返回值的类型 方法名(形参列表){}</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 类中方法的声明和使用</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 方法：</span><br><span class="hljs-comment"> * 		描述类应该具有的功能</span><br><span class="hljs-comment"> * 		比如: </span><br><span class="hljs-comment"> * 			Math类:sqrt() \ random() \...</span><br><span class="hljs-comment"> * 			Scanner类: nextXxx()...</span><br><span class="hljs-comment"> * 			Arrays类: sort() \ binarySearch() \ toString() \ equals() \ ....</span><br><span class="hljs-comment"> * 		1.举例：</span><br><span class="hljs-comment"> * 			public void eat()&#123;&#125;</span><br><span class="hljs-comment"> * 			public void sleep(int hour) &#123;&#125;</span><br><span class="hljs-comment"> * 			String getName()&#123;&#125;</span><br><span class="hljs-comment"> * 			public String getNation(String nation)&#123;&#125;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 			</span><br><span class="hljs-comment"> * 			void的位置表示返回值类型，void表示没有返回值，String表示返回一个String类型的</span><br><span class="hljs-comment"> * 			int hour的位置是形参的位置，可以没有</span><br><span class="hljs-comment"> * 			</span><br><span class="hljs-comment"> * 			Ctrl+shift+T 输入Arrays/Math可以打开这个类</span><br><span class="hljs-comment"> * 			Ctrl+O 输入sort/random,可以查看此方法</span><br><span class="hljs-comment"> * 			</span><br><span class="hljs-comment"> * 		2.方法的声明:权限修饰符 返回值类型 方法名(形参列表)&#123;</span><br><span class="hljs-comment"> * 								方法体</span><br><span class="hljs-comment"> * 					&#125;</span><br><span class="hljs-comment"> * 		注意：static、final、abstract 来修饰的方法，后面再讲。</span><br><span class="hljs-comment"> * 			</span><br><span class="hljs-comment"> * 		3.说明:</span><br><span class="hljs-comment"> * 			3.1 关于权限修饰符:</span><br><span class="hljs-comment"> * 				Java规定的4种权限修饰符:</span><br><span class="hljs-comment"> * 				private、public、缺省、protected----&gt;封装性再细说。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 			3.2 返回值类型：有返回值 VS 没有返回值</span><br><span class="hljs-comment"> * 				3.2.1 如果方法有返回值，则必须在方法声明时，指定返回值的类型。</span><br><span class="hljs-comment"> * 					同时，方法中，需要使用return关键字来返回指定类型的变量或常量: “return 数据”。</span><br><span class="hljs-comment"> * 					</span><br><span class="hljs-comment"> * 					如果方法没有返回值，则方法声明时，使用void来表示。</span><br><span class="hljs-comment"> * 					通常，没有返回值的方法中，就不需要return了，</span><br><span class="hljs-comment"> * 					但是，如果使用的话，只能“return;”表示结束此方法的意思。	</span><br><span class="hljs-comment"> * 				3.2.1 我们定义方法该不该有返回值？</span><br><span class="hljs-comment"> * 					1、题目要求</span><br><span class="hljs-comment"> * 					2、凭经验: 具体问题具体分析</span><br><span class="hljs-comment"> * 				</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 			3.3 方法名: 属于标识符，遵循标识符的规则和规范，“见名知意”</span><br><span class="hljs-comment"> * 						</span><br><span class="hljs-comment"> * 			3.4 形参列表: 方法可以声明0个，1个，或多个形参。</span><br><span class="hljs-comment"> * 				3.4.1 格式：</span><br><span class="hljs-comment"> * 						数据类型1 形参1,数据类型2 形参2,......</span><br><span class="hljs-comment"> * 				3.4.2 我们定义方法时，该不该定义形参？</span><br><span class="hljs-comment"> * 					1、题目要求</span><br><span class="hljs-comment"> * 					2、凭经验: 具体问题具体分析</span><br><span class="hljs-comment"> * 			3.5 方法体</span><br><span class="hljs-comment"> * 					方法功能的体现。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> * 		4、return关键字的使用：		</span><br><span class="hljs-comment"> * 			1、使用范围：使用在方法体中</span><br><span class="hljs-comment"> * 			2、作用：</span><br><span class="hljs-comment"> * 				① 结束方法 “return;”</span><br><span class="hljs-comment"> * 				② 针对于有返回值类型的方法，使用“return 数据”方法，返回所要的数据。</span><br><span class="hljs-comment"> * 			3、注意点:</span><br><span class="hljs-comment"> * 				return关键字后面不可以声明执行语句。</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> * 		5、方法的使用中，可以调用当前类的属性或方法。</span><br><span class="hljs-comment"> * 				特殊的，方法A中又调用了方法A:递归方法。</span><br><span class="hljs-comment"> * 			方法中,不可以定义方法。	</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Customer cust1 = <span class="hljs-keyword">new</span> Customer();<br>		cust1.eat();<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span></span>&#123;<br>	<span class="hljs-comment">//属性</span><br>	String name;<br>	<span class="hljs-keyword">int</span> age;<br>	<span class="hljs-keyword">boolean</span> isMale;<br>	<br>	<span class="hljs-comment">//方法</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;客户吃饭&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hour)</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;休息了&quot;</span>+hour+<span class="hljs-string">&quot;个小时&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-comment">/*</span><br><span class="hljs-comment">		 * if(age &gt; 18)&#123;</span><br><span class="hljs-comment">		 * 		return name;</span><br><span class="hljs-comment">		 * &#125;不行，必须返回。</span><br><span class="hljs-comment">		 * </span><br><span class="hljs-comment">		 */</span><br>		<span class="hljs-keyword">return</span> name;<br>		<span class="hljs-comment">//return &quot;Tom&quot;;</span><br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNation</span><span class="hljs-params">(String nation)</span> </span>&#123;<br>		String info = <span class="hljs-string">&quot;我的国籍是:&quot;</span>+nation;<br>		<span class="hljs-keyword">return</span> info;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>





<h3 id="7-4、理解“万事万物皆对象”"><a href="#7-4、理解“万事万物皆对象”" class="headerlink" title="7.4、理解“万事万物皆对象”"></a>7.4、理解“万事万物皆对象”</h3><p>一、理解“万事万物皆对象”</p>
<p>1、在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</p>
<p>​        &gt; Scanner,String等</p>
<p>​        &gt;文件，File</p>
<p>​        &gt;网络资源，URL</p>
<p>2、涉及到Java语言和前端HTML、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</p>
<h3 id="7-5、对象数组的内存解析"><a href="#7-5、对象数组的内存解析" class="headerlink" title="7.5、对象数组的内存解析"></a>7.5、对象数组的内存解析</h3><p>内存解析说明：</p>
<p>1、引用类型的变量，只可能存储两类值 null 或  地址值（含变量的类型）</p>
<p><img src="https://www.picbed.cn/images/2021/05/20/4.png"></p>
<p>对象数组</p>
<h3 id="7-6、匿名对象的使用"><a href="#7-6、匿名对象的使用" class="headerlink" title="7.6、匿名对象的使用"></a>7.6、匿名对象的使用</h3><p>理解：</p>
<p>​        我们创建的对象，没有显式的赋给一个变量名。即为匿名对象</p>
<p>特征：</p>
<p>​        匿名对象只能调用一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InstanceTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Phone p = <span class="hljs-keyword">new</span> Phone();<br><br>		System.out.println(p);<br>		<br>		p.playGame();<br>		p.sendEmail();<br>		<br>		<span class="hljs-comment">//匿名对象</span><br>		<span class="hljs-keyword">new</span> Phone().sendEmail();<br>		<span class="hljs-keyword">new</span> Phone().playGame();<br>		<br>		<br>		<span class="hljs-keyword">new</span> Phone().price=<span class="hljs-number">1999</span>;<br>		<span class="hljs-keyword">new</span> Phone().showPrice();<span class="hljs-comment">//0.0</span><br>		<br>		PhoneMall mall  = <span class="hljs-keyword">new</span> PhoneMall();<br>		<span class="hljs-comment">//mall.show(p);</span><br>		<span class="hljs-comment">//匿名对象的使用。</span><br>		mall.show(<span class="hljs-keyword">new</span> Phone());<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span></span>&#123;<br>	<span class="hljs-keyword">double</span> price;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendEmail</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playGame</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showPrice</span><span class="hljs-params">()</span></span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;手机价格是:&quot;</span>+price);<br>	&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PhoneMall</span></span>&#123;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(Phone phone)</span> </span>&#123;<br>		phone.sendEmail();<br>		phone.playGame();<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="7-7、再谈方法"><a href="#7-7、再谈方法" class="headerlink" title="7.7、再谈方法"></a>7.7、再谈方法</h3><h4 id="7-7-1、-方法的重载"><a href="#7-7-1、-方法的重载" class="headerlink" title="7.7.1、 方法的重载"></a>7.7.1、 方法的重载</h4><p>方法的重载（overload） loading……</p>
<p>1.定义：</p>
<p>​            在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</p>
<ul>
<li>“两同一不同”:<ul>
<li>同一个类、相同方法名</li>
<li>参数列表不同</li>
</ul>
</li>
</ul>
<p>举例：</p>
<p>​        Arrays类中重载的sort() / binarySearch()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverLoadTest</span> </span>&#123;<br>	<span class="hljs-comment">//如下四个方法构成了重载</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i ,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>		System.out.println(i+j);<br>	&#125;<br>	<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d1, <span class="hljs-keyword">double</span> d2)</span> </span>&#123;<br>		System.out.println(d1+d2);<br>	&#125;<br>	<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSum</span><span class="hljs-params">(String s,<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,String s)</span> </span>&#123;<br>	&#125;<br>	<br>&#125;<br></code></pre></td></tr></table></figure>

<p>3、判断是否是重载：</p>
<p>​        跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系。</p>
<p>​        </p>
<p>4、在通过对象调用方法时，如何确定某一个指定的方法：</p>
<p>​            方法名 —&gt;参数列表（可以自动类型提升）</p>
<h4 id="7-7-2、-可变个数的形参"><a href="#7-7-2、-可变个数的形参" class="headerlink" title="7.7.2、 可变个数的形参"></a>7.7.2、 可变个数的形参</h4><p>JavaSE 5.0中提供了Varargs(variable number of arguments)机制允许直接定义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可变的实参</p>
<p>//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</p>
<p>public static void test(int a,String[] books);</p>
<p>//JDK 5.0：采用可变个数形参来定义方法，传入多个同一类型变量</p>
<p>public static void test(int a,String…books);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 可变个数形参的方法</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 1、JDK 5.0新增内容</span><br><span class="hljs-comment"> * 2、具体使用：</span><br><span class="hljs-comment"> * 		2.1 可变个数形参的格式，数据类型...变量名</span><br><span class="hljs-comment"> * 		2.2 当调用可变个数形参的方法时，传入的参数个数可以是: 0个，1个，多个...</span><br><span class="hljs-comment"> * 		2.3 可变个数形参的方法与本类中的方法名相同，形参不同的方法之间构成重载</span><br><span class="hljs-comment"> * 		2.4 可变个数形参的方法与本类中的方法名相同，形参类型也相同的数组之间不构成重载，换句话说，两者不可共存。</span><br><span class="hljs-comment"> * 		2.5 可变个数形参在方法的形参中，必须声明在末尾。The variable argument type String of the method show </span><br><span class="hljs-comment"> * 			must be the last parameter</span><br><span class="hljs-comment"> * 		2.6 可变个数形参在方法的形参中，最多只能声明一个可变形参。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodArgsTest</span> </span>&#123;<br><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		MethodArgsTest test = <span class="hljs-keyword">new</span> MethodArgsTest();<br>		test.show(<span class="hljs-number">12</span>);<br>		test.show(<span class="hljs-string">&quot;hello&quot;</span>);<br>		test.show();<br>		test.show(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br>		<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;&#125;<br>	<br>	<span class="hljs-comment">//public void show(String s) &#123;&#125;</span><br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(String ...strs)</span> </span>&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; strs.length;i++) &#123;<br>			System.out.println(strs[i]);<br>		&#125;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,String ...strs)</span> </span>&#123;&#125;<br>	<br>	<span class="hljs-comment">//public void show(String[] strs) &#123;&#125;与上面冲突Duplicate method show(String[]) in type MethodArgsTest</span><br><br>	<span class="hljs-comment">//如果调用形参为数组：test.show(new String[]&#123;&quot;AA&quot;,&quot;BB&quot;&#125;);也可以用来调用public void show(String ...strs) 一般直接传字符串不用new</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure>











<h4 id="7-7-3、方法参数的值传递机制"><a href="#7-7-3、方法参数的值传递机制" class="headerlink" title="7.7.3、方法参数的值传递机制"></a>7.7.3、方法参数的值传递机制</h4><p>方法，必须由其所在类或对象调用才有意义。若方法含有参数：</p>
<ul>
<li>形参：方法声明时的参数</li>
<li>实参：方法调用时，实际传给形参的参数值</li>
</ul>
<p><strong>Java的实参值如何传入方法呢？</strong></p>
<p>Java里方法的参数传递方式只有一种：<strong>值传递</strong>。</p>
<p>即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p>
<ul>
<li>形参是基本数据类型: 将实参基本数据类型变量的“数据值”传递给形参</li>
<li>形参是引用数据类型: 将实参引用数据类型变量的“地址值”传递给形参</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 关于变量的赋值</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValueTransferTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<span class="hljs-keyword">int</span> m = <span class="hljs-number">10</span>;<br>		<span class="hljs-keyword">int</span> n = m;<br>		<br>		System.out.println(<span class="hljs-string">&quot;m=&quot;</span>+m+<span class="hljs-string">&quot;,n=&quot;</span>+n);<br>		<br>		n=<span class="hljs-number">20</span>;<br>		System.out.println(<span class="hljs-string">&quot;m=&quot;</span>+m+<span class="hljs-string">&quot;,n=&quot;</span>+n);<br>		<br>		<span class="hljs-comment">//引用数据类型</span><br>		<br>		Order o1 = <span class="hljs-keyword">new</span> Order();<br>		<br>		o1.orderId = <span class="hljs-number">1001</span>;<br>		<br>		Order o2 = o1;<br>		<br>		System.out.println(<span class="hljs-string">&quot;o1.orderId=&quot;</span>+o1.orderId+<span class="hljs-string">&quot;,o2.orderId=&quot;</span>+o2.orderId);<br>		<br>		o2.orderId = <span class="hljs-number">1002</span>;<br>		<br>		System.out.println(<span class="hljs-string">&quot;o1.orderId=&quot;</span>+o1.orderId+<span class="hljs-string">&quot;,o2.orderId=&quot;</span>+o2.orderId);<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span></span>&#123;<br>	<span class="hljs-keyword">int</span> orderId;<br>&#125;<br><br></code></pre></td></tr></table></figure>





<h4 id="7-7-4、递归方法"><a href="#7-7-4、递归方法" class="headerlink" title="7.7.4、递归方法"></a>7.7.4、递归方法</h4><p>递归（recursion）方法</p>
<p>递归方法：</p>
<ul>
<li>一个方法体内调用它自身。</li>
</ul>
<p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</p>
<p>递归一定要向己知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p>
<p>//计算1-100之间所有自然数的和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>		<span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>) &#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>		&#125;<span class="hljs-keyword">else</span> &#123;<br>			<span class="hljs-keyword">return</span> num+sum(num-<span class="hljs-number">1</span>);<br>		&#125;<br>	&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 递归方法的使用(了解)</span><br><span class="hljs-comment"> * 1、递归方法：一个方法体内调用它自身。</span><br><span class="hljs-comment"> * 2、方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</span><br><span class="hljs-comment"> *    递归一定要向己知方向递归，否则这种递归就变成了无穷递归，类似于死循环</span><br><span class="hljs-comment"> * 	</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecursionTest</span> </span>&#123;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<span class="hljs-comment">//方式一</span><br>		<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">100</span>;i++) &#123;<br>			sum += i;<br>		&#125;<br>		<span class="hljs-comment">//方式二</span><br>		RecursionTest test = <span class="hljs-keyword">new</span> RecursionTest();<br>		System.out.println(test.sum(<span class="hljs-number">100</span>));<br>		System.out.println(test.sum1(<span class="hljs-number">10</span>));<br>	&#125;<br>	<br>	<span class="hljs-comment">//计算1-100之间所有自然数的和</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>		<span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>) &#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>		&#125;<span class="hljs-keyword">else</span> &#123;<br>			<span class="hljs-keyword">return</span> num+sum(num-<span class="hljs-number">1</span>);<br>		&#125;<br>	&#125;<br>	<span class="hljs-comment">//计算1-10之间所有自然数的乘积: n!</span><br>		<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1)</span> </span>&#123;<br>			<span class="hljs-keyword">if</span>(num1 == <span class="hljs-number">1</span>) &#123;<br>				<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>			&#125;<span class="hljs-keyword">else</span> &#123;<br>				<span class="hljs-keyword">return</span> num1*sum1(num1-<span class="hljs-number">1</span>);<br>			&#125;<br>		&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h2 id="7-3、面向对象特征之一：封装与隐藏"><a href="#7-3、面向对象特征之一：封装与隐藏" class="headerlink" title="7.3、面向对象特征之一：封装与隐藏"></a>7.3、面向对象特征之一：封装与隐藏</h2><p>我们程序设计追求“高内聚，低耦合”</p>
<ul>
<li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</li>
<li>低耦合：仅对外暴露少量的方法用于使用。</li>
</ul>
<p>隐藏对象内部复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，<strong>把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</strong></p>
<p>使用者对类内部定义的属性（对象的成员变量）的直接操作会导致数据的错误、混乱或安全性问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm01;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 面向对象的特征之一：封装与隐藏</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 一、问题的引入：</span><br><span class="hljs-comment"> * 		当我们创建一个类的对象以后，</span><br><span class="hljs-comment"> * 		我们可以通过“对象.属性”的方式，对对象的属性进行赋值。</span><br><span class="hljs-comment"> * 		这里，赋值操作要受到属性的数据类型和存储范围的制约。</span><br><span class="hljs-comment"> * 		除此之外，没有其他制约条件。</span><br><span class="hljs-comment"> * 		但是，在实际问题中，我们往往需要给属性赋值加入额外的限制条件。</span><br><span class="hljs-comment"> * 		这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的添加。</span><br><span class="hljs-comment"> * 		(比如：setLegs())</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 		同时，我们需要避免用户再使用“对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的(private)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 		-----&gt;此时，针对于属性就体现了封装性。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 二、封装性的体现：</span><br><span class="hljs-comment"> * 		我们将类的属性xxx私有化(private),同时，提供公共的(public)方法来获取(getXxx)和设置此属性的值。		</span><br><span class="hljs-comment"> * 		(只是封装性本身之一，不等同于封装性)</span><br><span class="hljs-comment"> * 		拓展:</span><br><span class="hljs-comment"> * 			封装性的体现：</span><br><span class="hljs-comment"> * 			1、如上</span><br><span class="hljs-comment"> * 			2、不对外暴露的私有的方法</span><br><span class="hljs-comment"> * 			3、单例模式</span><br><span class="hljs-comment"> * 			... ...</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 三、封装性的体现，需要权限修饰符来配合。</span><br><span class="hljs-comment"> * 		1、Java规定的4种权限：(从小到大排列)</span><br><span class="hljs-comment"> * 		private</span><br><span class="hljs-comment"> * 		缺省(default)[什么都没写！！！]</span><br><span class="hljs-comment"> * 		protected</span><br><span class="hljs-comment"> * 		public</span><br><span class="hljs-comment"> * 			</span><br><span class="hljs-comment"> * 		2、4种权限可以用来修饰类及类的内部结构：</span><br><span class="hljs-comment"> * 			属性</span><br><span class="hljs-comment"> * 			方法</span><br><span class="hljs-comment"> * 			构造器</span><br><span class="hljs-comment"> * 			内部类</span><br><span class="hljs-comment"> * 		3、具体的，4种权限都可以用来修饰类及类的内部结构：属性、方法、构造器、内部类</span><br><span class="hljs-comment"> * 			修饰类的话，只能使用：</span><br><span class="hljs-comment"> * 					缺省、public</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimalTest</span> </span>&#123;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Animal a = <span class="hljs-keyword">new</span> Animal();<br>		a.name = <span class="hljs-string">&quot;大黄&quot;</span>;<br>		<span class="hljs-comment">//a.age = 1;</span><br>		a.setLegs(<span class="hljs-number">6</span>);<br>		<span class="hljs-comment">//a.legs = 3;</span><br>		<span class="hljs-comment">//The field Animal.legs is not visible不可见</span><br>		<span class="hljs-comment">//对这个属性，封装(隐藏)了</span><br>		System.out.println(a.name);<br>		<br>	&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>	String name;<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> legs;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLegs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l)</span> </span>&#123;<br>		<span class="hljs-keyword">if</span>(l &gt;= <span class="hljs-number">0</span> &amp;&amp; l%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>			legs = l;<br>		&#125;<span class="hljs-keyword">else</span> &#123;<br>			legs = <span class="hljs-number">0</span>;<br>			<span class="hljs-comment">//抛出一个异常（暂时没讲）</span><br>		&#125;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLegs</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> legs;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;进食&quot;</span>);<br>	&#125;<br>	<span class="hljs-comment">//提供关于属性age的get和set方法</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<br>		<span class="hljs-keyword">return</span> age;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>		age = a;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="四种访问权限修饰符"><a href="#四种访问权限修饰符" class="headerlink" title="四种访问权限修饰符"></a>四种访问权限修饰符</h3><p>Java权限修饰符public、protected、private置于类的成员定义前，用来限定对象对该类成员的访问权限</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>类内部</th>
<th>同一个包</th>
<th>不同包的子类</th>
<th>同一个工程</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>yes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>(缺省)</td>
<td>yes</td>
<td>yes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
</tbody></table>
<p>对于class的权限修饰只可以用public和default(缺省)</p>
<ul>
<li>public类可以在任意地方被访问</li>
<li>default类只可以被同一个包内部的类访问。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*   </span><br><span class="hljs-comment"> *	三、封装性的体现，需要权限修饰符来配合。</span><br><span class="hljs-comment"> * 		1、Java规定的4种权限：(从小到大排列)</span><br><span class="hljs-comment"> * 		private</span><br><span class="hljs-comment"> * 		缺省(default)[什么都没写！！！]</span><br><span class="hljs-comment"> * 		protected</span><br><span class="hljs-comment"> * 		public</span><br><span class="hljs-comment"> * 			</span><br><span class="hljs-comment"> * 		2、4种权限可以用来修饰类及类的内部结构：</span><br><span class="hljs-comment"> * 			属性</span><br><span class="hljs-comment"> * 			方法</span><br><span class="hljs-comment"> * 			构造器</span><br><span class="hljs-comment"> * 			内部类</span><br><span class="hljs-comment"> * 		3、具体的，4种权限都可以用来修饰类及类的内部结构：属性、方法、构造器、内部类</span><br><span class="hljs-comment"> * 			修饰类的话，只能使用：</span><br><span class="hljs-comment"> * 					缺省、public</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>



<h2 id="7-4、类的成员之三：构造器（或构造方法）"><a href="#7-4、类的成员之三：构造器（或构造方法）" class="headerlink" title="7.4、类的成员之三：构造器（或构造方法）"></a>7.4、类的成员之三：构造器（或构造方法）</h2><p>构造器的特征：</p>
<ul>
<li>它具有与类相同的名称</li>
<li>它不声明返回值类型。（与声明为void不同）</li>
<li>不能被static、final、synchronized、abstract、native修饰，不能有return语句返回值</li>
</ul>
<p>构造器的作用：</p>
<ul>
<li>如：<ul>
<li>Order o = new Order(); Person p = new Person(“Peter”,15);</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm01;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 类的结构之三:构造器(或构造方法、constructor)的使用</span><br><span class="hljs-comment"> * construct:</span><br><span class="hljs-comment"> * 		建设、建造</span><br><span class="hljs-comment"> * constructor:</span><br><span class="hljs-comment"> * 		建设者</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 一、构造器的作用:</span><br><span class="hljs-comment"> * 		1、创建对象</span><br><span class="hljs-comment"> * 		2、初始化对象的信息(给对象进行初始化)</span><br><span class="hljs-comment"> * 二、说明：</span><br><span class="hljs-comment"> * 		1、如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器</span><br><span class="hljs-comment"> * 		2、定义构造器的格式：</span><br><span class="hljs-comment"> * 				权限修饰符	类名(形参列表)&#123;&#125;</span><br><span class="hljs-comment"> * 		3、一个类中定义的多个构造器，彼此构成重载</span><br><span class="hljs-comment"> * 		4、一旦我们显式的定义了类的构造器之后，系统就不提供默认的空参构造器！</span><br><span class="hljs-comment"> * 		5、一个类中，至少会有一个构造器。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>	<span class="hljs-comment">//创建类的对象: new + 构造器</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<br>		Person p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>);<br>		<br>		System.out.println(p.name);<br>		p.eat();<br>	&#125;<br>	<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>	<span class="hljs-comment">//属性</span><br>	String name;<br>	<span class="hljs-keyword">int</span> age;<br>	<br>	<span class="hljs-comment">//构造器</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;Person()...&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String n)</span> </span>&#123;<br>		name = n;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String n,<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>		name = n;<br>		age = a;<br>	&#125;<br>	<span class="hljs-comment">//方法</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;人可以学习&quot;</span>);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="7-5、总结-属性赋值过程"><a href="#7-5、总结-属性赋值过程" class="headerlink" title="7.5、总结: 属性赋值过程"></a>7.5、总结: 属性赋值过程</h2><p>赋值的先后顺序:</p>
<ul>
<li>赋值的位置:<ul>
<li>默认初始化</li>
<li>显式初始化</li>
<li>构造器中初始化</li>
<li>通过“对象.属性” 或 “对象.方法”的方式赋值</li>
</ul>
</li>
</ul>
<ul>
<li>赋值的先后顺序:<ul>
<li>①—②—③—④</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTest</span> </span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 总结：属性赋值的先后顺序</span><br><span class="hljs-comment"> *   </span><br><span class="hljs-comment"> * ① 默认初始化值(例如int age)</span><br><span class="hljs-comment"> * ② 显式初始化(例如int age = 1)</span><br><span class="hljs-comment"> * ③ 构造器中初始化(赋值)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * ④ 通过&quot;对象.方法&quot;或者&quot;对象.属性&quot;的方式，赋值</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 以上操作的先后顺序:</span><br><span class="hljs-comment"> * 		①---②---③---④</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		User u = <span class="hljs-keyword">new</span> User();<br>		System.out.println(u.age);<br>		<br>		User u1 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>);<br>		<br>		u1.setAge(<span class="hljs-number">3</span>);<br>		<br>		System.out.println(u1.age);<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>	String name;<br>	<span class="hljs-keyword">int</span> age=<span class="hljs-number">1</span>;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>		age = a;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>		age = a;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-6、JavaBean"><a href="#7-6、JavaBean" class="headerlink" title="7.6、JavaBean"></a>7.6、JavaBean</h2><p>JavaBean是一种Java语言写成的可重用组件。</p>
<p>所谓JavaBean,是指符合如下标准的Java类:</p>
<ul>
<li>类是公共的</li>
<li>有一个无参的公共的构造器</li>
<li>有属性，且有对应的get、set方法</li>
</ul>
<p>用户可以使用JavaBean将功能、处理、值、数据库访问和其它任何可以用Java代码创造的对象进行打包，并且其它的开发者可以通过内部的JSP页面、Servlet、其它JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</p>
<blockquote>
<p>alt + shift + s 选择自动生成get set</p>
</blockquote>
<h2 id="7-7、拓展：UML类图"><a href="#7-7、拓展：UML类图" class="headerlink" title="7.7、拓展：UML类图"></a>7.7、拓展：UML类图</h2><p><img src="https://www.picbed.cn/images/2021/05/23/5.png"></p>
<h2 id="7-8、关键字-this的使用"><a href="#7-8、关键字-this的使用" class="headerlink" title="7.8、关键字:this的使用"></a>7.8、关键字:this的使用</h2><p>this是什么？</p>
<p>在Java中，this关键字比较难理解，它的作用和其词义很接近。</p>
<ul>
<li>它在方法内部使用，即这个方法所属对象的引用:</li>
<li>它在构造器内部使用，表示该构造器正在初始化的对象。</li>
</ul>
<p>this表示当前对象，可以调用类的属性、方法和构造器</p>
<p>什么时候使用this关键字？</p>
<ul>
<li><p>当在方法内需要用到调用该方法的对象时，就用this.</p>
<p>具体的： 我们可以用this来区分局部变量和属性。</p>
</li>
</ul>
<p>3W： what? why? how?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm02;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * this关键字的使用：</span><br><span class="hljs-comment"> * 		1、this可以用来修饰、调用:</span><br><span class="hljs-comment"> * 				属性、方法、构造器</span><br><span class="hljs-comment"> * 		</span><br><span class="hljs-comment"> *		2、this修饰属性和方法:</span><br><span class="hljs-comment"> *				this理解为: 当前对象 或当前正在创建的对象	</span><br><span class="hljs-comment"> * 	</span><br><span class="hljs-comment"> * 			2.1	在类的方法中，我们可以使用&quot;this.属性&quot;或&quot;this.方法&quot;的方式，调用当前对象属性或方法。但是，</span><br><span class="hljs-comment"> * 				通常情况下，我们都选择省略&quot;this.&quot;.特殊情况下，如果方法的形参和类的属性同名时，我们必须显式</span><br><span class="hljs-comment"> * 				的使用&quot;this.变量&quot;的方式，表明此变量是属性，而非形参。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 			2.2	在类的构造器中，我们可以使用&quot;this.属性&quot;或&quot;this.方法&quot;的方式，调用当前正在创建的对象属性或方法。但是，</span><br><span class="hljs-comment"> * 				通常情况下，我们都选择省略&quot;this.&quot;.特殊情况下，如果方法的形参和类的属性同名时，我们必须显式</span><br><span class="hljs-comment"> * 				的使用&quot;this.变量&quot;的方式，表明此变量是属性，而非形参。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 		3、this调用构造器</span><br><span class="hljs-comment"> * 				① 我们在类的构造器中，可以显式的使用“this(形参列表)”方式，调用本类中指定的类的其它构造器。</span><br><span class="hljs-comment"> * 				② 构造器中不能通过“this(形参列表)”方式调用自己。</span><br><span class="hljs-comment"> * 				③ 如果一个类中有n个构造器，则最多有n - 1个构造器中使用了“this(形参列表)”</span><br><span class="hljs-comment"> * 				④ 规定:“this(形参列表)” 必须声明在当前构造器的首行</span><br><span class="hljs-comment"> *  			⑤ 构造器内部,最多只能声明一个“this(形参列表)” ,用来调用其它的构造器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Person p1 = <span class="hljs-keyword">new</span> Person();<br>		<br>		p1.setAge(<span class="hljs-number">1</span>);<br>		<br>		System.out.println(p1.getAge());<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>	<span class="hljs-keyword">private</span>	String name;<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>	<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.eat();<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>();<br>		<span class="hljs-keyword">this</span>.name = name;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>();<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>(age);<br>		<span class="hljs-keyword">this</span>.name = name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.name = name;<br>		<span class="hljs-comment">//this可理解为当前对象</span><br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> age;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>		<span class="hljs-keyword">this</span>.age = age;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>		<br>	&#125;<br>	<br>	<br>	<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-9、关键字：-package、import的使用"><a href="#7-9、关键字：-package、import的使用" class="headerlink" title="7.9、关键字： package、import的使用"></a>7.9、关键字： package、import的使用</h2><ul>
<li>java.lang<ul>
<li>提供一些Java语言的核心类，如String、Math、Integer、System和Thread提供常用的功能</li>
</ul>
</li>
<li>java.net<ul>
<li>包含执行与网络相关的操作的类和接口</li>
</ul>
</li>
<li>java.io<ul>
<li>包含能提供多种输入/输出功能的类。</li>
</ul>
</li>
<li>java.util<ul>
<li>包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。</li>
</ul>
</li>
<li>java.text<ul>
<li>包含一些java格式化相关的类</li>
</ul>
</li>
<li>java.sql<ul>
<li>包含了Java进行JDBC数据库编程的相关类/接口</li>
</ul>
</li>
<li>java.awt<ul>
<li>包含了构成抽象窗口工具集(abstract window toolkits)的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI) B/S C/S</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">	 *  一、package关键字的使用</span><br><span class="hljs-comment">	 *  	1、为了更好的实现项目中类的管理，提供包的概念</span><br><span class="hljs-comment">	 * 		2、使用package声明类或接口所属的包，声明在源文件的首行</span><br><span class="hljs-comment">	 * 		3、包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</span><br><span class="hljs-comment">	 * 		4、每“.”一次，就代表一层文件目录。</span><br><span class="hljs-comment">	 * 		</span><br><span class="hljs-comment">	 * 补充：</span><br><span class="hljs-comment">	 * 		同一个包下，不能命名同名的接口、类</span><br><span class="hljs-comment">	 * 		不同的包下，可以命名同名的接口、类</span><br><span class="hljs-comment">	 */</span><br></code></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.dm02;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.System.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PackageImportTest</span> </span>&#123;<br>	<span class="hljs-comment">/*</span><br><span class="hljs-comment">	 *  一、package关键字的使用</span><br><span class="hljs-comment">	 *  	1、为了更好的实现项目中类的管理，提供包的概念</span><br><span class="hljs-comment">	 * 		2、使用package声明类或接口所属的包，声明在源文件的首行</span><br><span class="hljs-comment">	 * 		3、包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</span><br><span class="hljs-comment">	 * 		4、每“.”一次，就代表一层文件目录。</span><br><span class="hljs-comment">	 * 		</span><br><span class="hljs-comment">	 * 补充：</span><br><span class="hljs-comment">	 * 		同一个包下，不能命名同名的接口、类</span><br><span class="hljs-comment">	 * 		不同的包下，可以命名同名的接口、类</span><br><span class="hljs-comment">	 * </span><br><span class="hljs-comment">	 * </span><br><span class="hljs-comment">	 * 	二、import关键字的使用</span><br><span class="hljs-comment">	 * 		import导入</span><br><span class="hljs-comment">	 * 		1、在源文件中显式的使用import结构导入指定包下的类、接口</span><br><span class="hljs-comment">	 * 		2、声明在包的声明和类的声明之间</span><br><span class="hljs-comment">	 * 		3、如果需要导入多个结构，则并列写出即可。</span><br><span class="hljs-comment">	 * 		4、可以使用“xxx.*”的方式表示可以导入xxx包下的所有结构。</span><br><span class="hljs-comment">	 * 		5、如果使用的类或接口是java.lang包下定义的，则可以省略import结构</span><br><span class="hljs-comment">	 * 		6、如果使用的类或接口是本包下定义的，则可以省略import结构</span><br><span class="hljs-comment">	 * 		7、如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示。</span><br><span class="hljs-comment">	 * 						com.test.dm02.UserTest u = new com.test.dm02.UserTest();</span><br><span class="hljs-comment">	 * 		8、如果使用“xxx.*”方式表面可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</span><br><span class="hljs-comment">	 * </span><br><span class="hljs-comment">	 * 		9、import static:导入指定类或接口中的静态[结构]!!!: 属性或方法。</span><br><span class="hljs-comment">	 * 						import static java.lang.System.*;</span><br><span class="hljs-comment">	 * 		</span><br><span class="hljs-comment">	 * </span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		<br>		String info = Arrays.toString(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;);<br>		<br>		HashMap  h = <span class="hljs-keyword">new</span> HashMap();<br>		<br>		com.test.dm02.UserTest u = <span class="hljs-keyword">new</span> com.test.dm02.UserTest();<br>		<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<h2 id="7-10、MVC设计模式"><a href="#7-10、MVC设计模式" class="headerlink" title="7.10、MVC设计模式"></a>7.10、MVC设计模式</h2><p>MVC是常用的设计模式之一</p>
<p>将整个程序分为三个层次：<strong>视图模型层</strong>，<strong>控制器层</strong>，与<strong>数据模型层</strong>。</p>
<p>这种将程序输入输出、数据处理、以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。</p>
<blockquote>
<p>模型层 model 主要处理数据</p>
<ul>
<li>数据对象封装 model.bean/domain</li>
<li>数据库操作类 model.dao</li>
<li>数据库 model.db</li>
</ul>
</blockquote>
<blockquote>
<p>控制层 controller 处理业务逻辑</p>
<ul>
<li>应用界面相关 controller.activity</li>
<li>存放fragment controller.fragment</li>
<li>显式列表的适配器  controller.adapter</li>
<li>服务相关的      controller.service</li>
<li>抽取的基类     controller.base</li>
</ul>
</blockquote>
<blockquote>
<p>视图层   view 显示数据</p>
<p>相关工具类   view.utils</p>
<p>自定义view   view.ui</p>
</blockquote>
<p><img src="https://www.picbed.cn/images/2021/05/24/6.png"></p>
<h2 id="7-11、Eclipse中的快捷键"><a href="#7-11、Eclipse中的快捷键" class="headerlink" title="7.11、Eclipse中的快捷键"></a>7.11、Eclipse中的快捷键</h2><blockquote>
<p>Eclipse中的快捷键</p>
</blockquote>
<p><a href="http://www.blogjava.net/action/articles/17339.html">Eclipse快捷键大全(转载)</a></p>
<p>Ctrl+1 快速修复(最经典的快捷键,就不用多说了)<br>Ctrl+D: 删除当前行<br>Ctrl+Alt+↓ 复制当前行到下一行(复制增加)<br>Ctrl+Alt+↑ 复制当前行到上一行(复制增加)<br>Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)<br>Alt+↑ 当前行和上面一行交互位置(同上)<br>Alt+← 前一个编辑的页面<br>Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)<br>Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性<br>Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)<br>Shift+Ctrl+Enter 在当前行插入空行(原理同上条)<br>Ctrl+Q 定位到最后编辑的地方<br>Ctrl+L 定位在某行 (对于程序超过100的人就有福音了)<br>Ctrl+M 最大化当前的Edit或View (再按则反之)<br>Ctrl+/ 注释当前行,再按则取消注释<br>Ctrl+O 快速显示 OutLine<br>Ctrl+T 快速显示当前类的继承结构<br>Ctrl+W 关闭当前Editer<br>Ctrl+K 参照选中的Word快速定位到下一个<br>Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)<br>Ctrl+/(小键盘) 折叠当前类中的所有代码<br>Ctrl+×(小键盘) 展开当前类中的所有代码<br>Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替)<br>Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)<br>Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了)<br>Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查)<br>Ctrl+Shift+F4 关闭所有打开的Editer<br>Ctrl+Shift+X 把当前选中的文本全部变味小写<br>Ctrl+Shift+Y 把当前选中的文本全部变为小写<br>Ctrl+Shift+F 格式化当前代码<br>Ctrl+Shift+P 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)</p>
<p>下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了)<br>Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力)<br>Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)<br>Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)<br>Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)<br>Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能)<br>Alt+Shift+I 合并变量(可能这样说有点不妥Inline)<br>Alt+Shift+V 移动函数和变量(不怎么常用)<br>Alt+Shift+Z 重构的后悔药(Undo)</p>
<p>编辑<br>作用域 功能 快捷键<br>全局 查找并替换 Ctrl+F<br>文本编辑器 查找上一个 Ctrl+Shift+K<br>文本编辑器 查找下一个 Ctrl+K<br>全局 撤销 Ctrl+Z<br>全局 复制 Ctrl+C<br>全局 恢复上一个选择 Alt+Shift+↓<br>全局 剪切 Ctrl+X<br>全局 快速修正 Ctrl1+1<br>全局 内容辅助 Alt+/<br>全局 全部选中 Ctrl+A<br>全局 删除 Delete<br>全局 上下文信息 Alt+？<br>Alt+Shift+?<br>Ctrl+Shift+Space<br>Java编辑器 显示工具提示描述 F2<br>Java编辑器 选择封装元素 Alt+Shift+↑<br>Java编辑器 选择上一个元素 Alt+Shift+←<br>Java编辑器 选择下一个元素 Alt+Shift+→<br>文本编辑器 增量查找 Ctrl+J<br>文本编辑器 增量逆向查找 Ctrl+Shift+J<br>全局 粘贴 Ctrl+V<br>全局 重做 Ctrl+Y </p>
<p>查看<br>作用域 功能 快捷键<br>全局 放大 Ctrl+=<br>全局 缩小 Ctrl+- </p>
<p>窗口<br>作用域 功能 快捷键<br>全局 激活编辑器 F12<br>全局 切换编辑器 Ctrl+Shift+W<br>全局 上一个编辑器 Ctrl+Shift+F6<br>全局 上一个视图 Ctrl+Shift+F7<br>全局 上一个透视图 Ctrl+Shift+F8<br>全局 下一个编辑器 Ctrl+F6<br>全局 下一个视图 Ctrl+F7<br>全局 下一个透视图 Ctrl+F8<br>文本编辑器 显示标尺上下文菜单 Ctrl+W<br>全局 显示视图菜单 Ctrl+F10<br>全局 显示系统菜单 Alt+- </p>
<p>导航<br>作用域 功能 快捷键<br>Java编辑器 打开结构 Ctrl+F3<br>全局 打开类型 Ctrl+Shift+T<br>全局 打开类型层次结构 F4<br>全局 打开声明 F3<br>全局 打开外部javadoc Shift+F2<br>全局 打开资源 Ctrl+Shift+R<br>全局 后退历史记录 Alt+←<br>全局 前进历史记录 Alt+→<br>全局 上一个 Ctrl+,<br>全局 下一个 Ctrl+.<br>Java编辑器 显示大纲 Ctrl+O<br>全局 在层次结构中打开类型 Ctrl+Shift+H<br>全局 转至匹配的括号 Ctrl+Shift+P<br>全局 转至上一个编辑位置 Ctrl+Q<br>Java编辑器 转至上一个成员 Ctrl+Shift+↑<br>Java编辑器 转至下一个成员 Ctrl+Shift+↓<br>文本编辑器 转至行 Ctrl+L </p>
<p>搜索<br>作用域 功能 快捷键<br>全局 出现在文件中 Ctrl+Shift+U<br>全局 打开搜索对话框 Ctrl+H<br>全局 工作区中的声明 Ctrl+G<br>全局 工作区中的引用 Ctrl+Shift+G </p>
<p>文本编辑<br>作用域 功能 快捷键<br>文本编辑器 改写切换 Insert<br>文本编辑器 上滚行 Ctrl+↑<br>文本编辑器 下滚行 Ctrl+↓ </p>
<p>文件<br>作用域 功能 快捷键<br>全局 保存 Ctrl+X<br>Ctrl+S<br>全局 打印 Ctrl+P<br>全局 关闭 Ctrl+F4<br>全局 全部保存 Ctrl+Shift+S<br>全局 全部关闭 Ctrl+Shift+F4<br>全局 属性 Alt+Enter<br>全局 新建 Ctrl+N </p>
<p>项目<br>作用域 功能 快捷键<br>全局 全部构建 Ctrl+B </p>
<p>源代码<br>作用域 功能 快捷键<br>Java编辑器 格式化 Ctrl+Shift+F<br>Java编辑器 取消注释 Ctrl+\<br>Java编辑器 注释 Ctrl+/<br>Java编辑器 添加导入 Ctrl+Shift+M<br>Java编辑器 组织导入 Ctrl+Shift+O<br>Java编辑器 使用try/catch块来包围 未设置，太常用了，所以在这里列出,建议自己设置。<br>也可以使用Ctrl+1自动修正。 </p>
<p>运行<br>作用域 功能 快捷键<br>全局 单步返回 F7<br>全局 单步跳过 F6<br>全局 单步跳入 F5<br>全局 单步跳入选择 Ctrl+F5<br>全局 调试上次启动 F11<br>全局 继续 F8<br>全局 使用过滤器单步执行 Shift+F5<br>全局 添加/去除断点 Ctrl+Shift+B<br>全局 显示 Ctrl+D<br>全局 运行上次启动 Ctrl+F11<br>全局 运行至行 Ctrl+R<br>全局 执行 Ctrl+U </p>
<p>重构<br>作用域 功能 快捷键<br>全局 撤销重构 Alt+Shift+Z<br>全局 抽取方法 Alt+Shift+M<br>全局 抽取局部变量 Alt+Shift+L<br>全局 内联 Alt+Shift+I<br>全局 移动 Alt+Shift+V<br>全局 重命名 Alt+Shift+R<br>全局 重做 Alt+Shift+Y</p>
<p><a href="https://www.runoob.com/w3cnote/eclipse-shortcuts.html">以下转载自菜鸟教程</a></p>
<p>做 java 开发的，经常会用 Eclipse 或者 MyEclise 集成开发环境，一些实用的 Eclipse 快捷键和使用技巧，可以在平常开发中节约出很多时间提高工作效率，下面我就结合自己开发中的使用和大家分享一下 Eclipse 中常用到的快捷键和技巧。</p>
<h2 id="15-个-Eclipse-常用开发快捷键使用技巧"><a href="#15-个-Eclipse-常用开发快捷键使用技巧" class="headerlink" title="15 个 Eclipse 常用开发快捷键使用技巧"></a>15 个 Eclipse 常用开发快捷键使用技巧</h2><h3 id="1、alt-或-alt-：自动补全代码或者提示代码"><a href="#1、alt-或-alt-：自动补全代码或者提示代码" class="headerlink" title="1、alt+? 或 **alt+/**：自动补全代码或者提示代码"></a>1、<strong>alt+?</strong> 或 **alt+/**：自动补全代码或者提示代码</h3><p>这个是我最得意的快捷键组合了，尤其是当输入 syso 几个字符之后，2 个手指轻松按下这 2 个键的时候，自动就补全 <strong>System.out.println();</strong> 了，而且 eclipse 默认是出现 <strong>.</strong> 进行方法提示，如果中间提示断了想再看的话还得重新在对应类或者变量的前边输入 <strong>.</strong> 才可以再看到提示，不过如果这 2 个键结合是使用同样可以起到提示的作用，你可以试一试，而且如果输入 for 后，上边如果有需要遍历的局部变量的话，会弹出选择用 <strong>for each</strong> 遍历还是 <strong>for(int;;)</strong> 还是 <strong>while()</strong> 然后自动生成代码。</p>
<h3 id="2、ctrl-o：快速outline视图"><a href="#2、ctrl-o：快速outline视图" class="headerlink" title="2、ctrl+o：快速outline视图"></a>2、<strong>ctrl+o</strong>：快速outline视图</h3><p>如果想要查看当前类的方法或某个特定方法，但又不想把代码拉上拉下，也不想使用查找功能的话，就用 <strong>ctrl+o</strong>，尤其是直接打开或者跟踪到一个方法非常多的类的时候，这个就就非常有用，直接看出有那些方法及成员变量，它可以列出当前类中的所有方法及属性，你只需输入你想要查询的方法名，点击 <strong>enter</strong> 就能够直接跳转至你想去的位置。</p>
<h3 id="3、ctrl-shift-r：打开资源列表"><a href="#3、ctrl-shift-r：打开资源列表" class="headerlink" title="3、ctrl+shift+r：打开资源列表"></a>3、<strong>ctrl+shift+r</strong>：打开资源列表</h3><p>这可能是所有快捷键组合中最省时间的了，也是我经常用到的，尤其是根据名字直接在项目或者工作空间里找某个文件，这组快捷键可以让你打开你的工作区中任何一个文件，而你只需要按下文件名或 mask 名中的前几个字母，比如 applic*.xml。美中不足的是这组快捷键并非在所有视图下都能用。</p>
<h3 id="4、ctrl-shift-f：格式化代码"><a href="#4、ctrl-shift-f：格式化代码" class="headerlink" title="4、ctrl+shift+f：格式化代码"></a>4、<strong>ctrl+shift+f</strong>：格式化代码</h3><p>默认 80 个字符就换行，这个可以设置的。也可以根据代码风格设定重新格式化代码，我 们的团队有统一的代码格式，我们把它放在我们的 wiki 上。要这么做，我们打开 Eclipse，选择 Window Style，然后设置 Code Formatter，Code Style 和 Organize Imports。利用导出（Export）功能来生成配置文件。我们把这些配置文件放在 wiki 上，然后团队里的每个人都导入到自己的 Eclipse 中。</p>
<h3 id="5、ctrl-e：快速转换编辑器"><a href="#5、ctrl-e：快速转换编辑器" class="headerlink" title="5、ctrl+e：快速转换编辑器"></a>5、<strong>ctrl+e</strong>：快速转换编辑器</h3><p>这组快捷键将帮助你在打开的编辑器之间浏览，尤是在很多文件打开的状态下，<strong>ctrl+e</strong> 会更加有效率，非常有帮助。</p>
<h3 id="6、ctrl-page-down-或-ctrl-page-up：-选项卡之间快速切换"><a href="#6、ctrl-page-down-或-ctrl-page-up：-选项卡之间快速切换" class="headerlink" title="6、ctrl+page down 或 ctrl+page up： 选项卡之间快速切换"></a>6、<strong>ctrl+page down</strong> 或 <strong>ctrl+page up</strong>： 选项卡之间快速切换</h3><p>可以浏览前后的选项卡，如果使用熟练的话，各个页面切换会非常的快，感觉很不错。</p>
<h3 id="7、shift-enter-及-ctrl-shift-enter：-在当前行上或者下边创建空白。"><a href="#7、shift-enter-及-ctrl-shift-enter：-在当前行上或者下边创建空白。" class="headerlink" title="7、shift+enter 及 ctrl+shift+enter： 在当前行上或者下边创建空白。"></a>7、<strong>shift+enter</strong> 及 <strong>ctrl+shift+enter</strong>： 在当前行上或者下边创建空白。</h3><p><strong>Shift+enter</strong> 在当前行之下创建一个空白行，与光标是否在行末无关。<strong>Ctrl+shift+enter</strong> 则在当前行之前插入空白行。这 2 个快捷键也是非常有帮助的，刚开始可能你不习惯，但用上多次之后，你会感觉很方便，反正我是这样的。</p>
<h3 id="8、Alt-方向键上下：上下行交换内容或把当前行内容把上或下移动"><a href="#8、Alt-方向键上下：上下行交换内容或把当前行内容把上或下移动" class="headerlink" title="8、Alt+方向键上下：上下行交换内容或把当前行内容把上或下移动"></a>8、<strong>Alt+方向键上下</strong>：上下行交换内容或把当前行内容把上或下移动</h3><p>这也是个节省时间的法宝。这个组合将当前行的内容往上或下移动。在 <strong>try/catch</strong> 部分，这个快捷方式尤其好使。</p>
<h3 id="9、Control-Alt-方向上下键：复制高亮显示的一行或多行"><a href="#9、Control-Alt-方向上下键：复制高亮显示的一行或多行" class="headerlink" title="9、Control+Alt+方向上下键：复制高亮显示的一行或多行"></a>9、<strong>Control+Alt+方向上下键</strong>：复制高亮显示的一行或多行</h3><p>这个也是非常有用的快捷键，能非常方便复制当前代码到上一行或者下一行，我也经常用到。</p>
<h3 id="10、ctrl-m：当前编辑页面窗口最大化"><a href="#10、ctrl-m：当前编辑页面窗口最大化" class="headerlink" title="10、ctrl+m：当前编辑页面窗口最大化"></a>10、<strong>ctrl+m</strong>：当前编辑页面窗口最大化</h3><p>大显示屏幕能够提高工作效率是大家都知道的。<strong>Ctrl+m</strong> 是编辑器窗口最大化的快捷键，再次按下就恢复正常窗口。</p>
<h3 id="11、-ctrl-：自动注释当前行或者选择的多行"><a href="#11、-ctrl-：自动注释当前行或者选择的多行" class="headerlink" title="11、**ctrl+/**：自动注释当前行或者选择的多行"></a>11、**ctrl+/**：自动注释当前行或者选择的多行</h3><p>自动注释掉当前行或者多行代码，用 <strong>//</strong> 注释，用 *<em>ctrl+*</em> 可以取消注释。</p>
<h3 id="12、-ctrl-shift-：自动注释掉选择的代码块"><a href="#12、-ctrl-shift-：自动注释掉选择的代码块" class="headerlink" title="12、**ctrl+shift+/**：自动注释掉选择的代码块"></a>12、**ctrl+shift+/**：自动注释掉选择的代码块</h3><p>这个注意是用 <strong>/* */</strong> 注释的（如果是编程语言代码），开发中也是非常有用的，html,css 等也可以用这个注释,生成对应的注释标签，用 *<em>ctrl+shift+*</em> 可以取消注释。</p>
<h3 id="13、ctrl-d：删除当前行"><a href="#13、ctrl-d：删除当前行" class="headerlink" title="13、ctrl+d：删除当前行"></a>13、<strong>ctrl+d</strong>：删除当前行</h3><p>删除当前行，这个很有用，我也是经常用的，尤其是在调试，删除当前错误，结合 ctrl+z 编辑撤销的快捷键，运用自如。</p>
<h3 id="14、ctrl-shift-x-和-ctrl-shift-y-：英文字母大小写的转换"><a href="#14、ctrl-shift-x-和-ctrl-shift-y-：英文字母大小写的转换" class="headerlink" title="14、ctrl+shift+x 和 ctrl+shift+y ：英文字母大小写的转换"></a>14、<strong>ctrl+shift+x</strong> 和 <strong>ctrl+shift+y</strong> ：英文字母大小写的转换</h3><p>这个快捷键常用语 SQL 语句的编写中，我也是经常用的，建议大家 SQL 语句中的关键字都用大写，尽管数据库大小写不区分，但这样有利于他人和自己阅读尤其是 SQL 语句非常长的情况下，而且这样看着也很规范。</p>
<h3 id="15、ctrl-shift-o：自动引入包和删除无用包"><a href="#15、ctrl-shift-o：自动引入包和删除无用包" class="headerlink" title="15、ctrl+shift+o：自动引入包和删除无用包"></a>15、<strong>ctrl+shift+o</strong>：自动引入包和删除无用包</h3><p>这个快捷键也非常方便，当我们使用一个其他包中的类时，如果未引入对应的包或者类，就会出现红色波浪线的提示，此时我们可以按下这个快捷键，红色提示自动消失恢复正常，如果有多个包含有相同的这个类，那么会提示让你选择，如果有没用到的包而引入的情况，通常代码复制来复制去造成的较多，也可以用这个键快速去除。</p>
<h3 id="附上一些小窍门："><a href="#附上一些小窍门：" class="headerlink" title="附上一些小窍门："></a>附上一些小窍门：</h3><p><strong>锁定命令行窗口</strong>：在命令行视图中（Window -&gt; Show View -&gt;Other -&gt; Basic -&gt; Console），试试看用滚动锁定按钮来锁定控制台输出不要滚屏。</p>
<p><strong>使用 Ant 视图</strong>： 在我的 Java 或 Debug 模式下，我喜欢显示出 Ant 视图，这样我就可以迅速的运行 Ant 任务。通过 Window Ant 可以找到该视图。把 Ant 视图放在屏幕的一角， 通过”添加编译文件（Add -&gt; Other-&gt; Show View -&gt; Buildfiles）”按钮来添加build.xml文件。在3.1版本中，甚至支持Ant调试脚本语言。</p>
<p><strong>自动遍历一个集合</strong>：for + Control-Space: 如果你还不知道，那么你应该记住Control-Space是自动完成功能。在Eclipse中，你还可以自动完成结构。在一个数组或集合范围内，试试看 输入”for”然后按下Control-Space键。Eclipse会问你你想要遍历哪一个集合然后自动完成循环代码。</p>
<p><strong>使用分级布局</strong>： 在包浏览视图（Package Explorer view）中默认的布局（扁平式）方式让我困惑，它把包的全名显示在导航树（navigation tree）中。我更喜欢我源码的包和文件系统视图，在Eclipse中叫做分级布局（Hierarchical Layout）。要切换到这种模式，点击包浏览视图中向下的按钮，选择布局（Layout），然后选择分级（Hierarchial）。</p>
<p><strong>一次显示多个文件</strong>：你可以一次浏览多个文件。把不在激活状态的编辑窗口拖到激活窗口的底部或侧边的滚动条上，就可以打开该编辑窗口。这是我能描述该窍门的最好方式了。</p>
<p><strong>同时打开两个Eclipse</strong>： 要将改动从一个CVS分支上合并到另外一个上，我喜欢通过同时打开两个工作目录（Workspace）不同Eclipse来实现。这样我可以通过比较 CVS上的最新版本看到所有的变化（右键单击工程，然后选择Compare Lastest from HEAD）然后把每一个变化都合并到另外一个CVS分支上。启动多个Eclipse的最简单的方法是利用Eclipseàwith Launcher。</p>
<p><strong>Implementors插件</strong>：安装一个能够跳到一个接口的实现的插件。如果你是个dependency injection 粉丝，或者正在基于编写优良的接口工作，那么你需要一个这样的插件来加速代码导航。 你可以在SourceForge找到这个插件。</p>
<p><strong>自动生成getter和setter方法</strong>：在对应的POJO中，右击空白处，选择【Source】,再选择【Generate Getters and Setters】,然后选择自己对哪些属性生成这样的方法，点击【确定】就OK了，尤其是成员变量非常多的情况下，很节省时间。</p>
<h3 id="附上Eclipse快捷键大全："><a href="#附上Eclipse快捷键大全：" class="headerlink" title="附上Eclipse快捷键大全："></a>附上Eclipse快捷键大全：</h3><ul>
<li><strong>Ctrl+1:</strong> 快速修复(最经典的快捷键,就不用多说了)</li>
<li><strong>Ctrl+D:</strong> 删除当前行</li>
<li><strong>Ctrl+Alt+↓:</strong> 复制当前行到下一行(复制增加)</li>
<li><strong>Ctrl+Alt+↑:</strong> 复制当前行到上一行(复制增加)</li>
<li><strong>Alt+↓:</strong> 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)</li>
<li><strong>Alt+↑:</strong> 当前行和上面一行交互位置(同上)</li>
<li><strong>Alt+←:</strong> 前一个编辑的页面</li>
<li><strong>Alt+→:</strong> 下一个编辑的页面(当然是针对上面那条来说了)</li>
<li><strong>Alt+Enter:</strong> 显示当前选择资源(工程,or 文件 or文件)的属性</li>
<li><strong>Shift+Enter:</strong> 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)</li>
<li><strong>Shift+Ctrl+Enter:</strong> 在当前行插入空行(原理同上条)</li>
<li><strong>Ctrl+Q:</strong> 定位到最后编辑的地方</li>
<li><strong>Ctrl+L:</strong> 定位在某行 (对于程序超过100的人就有福音了)</li>
<li><strong>Ctrl+M:</strong> 最大化当前的Edit或View (再按则反之)</li>
<li><strong>Ctrl+/:</strong> 注释当前行,再按则取消注释</li>
<li><strong>Ctrl+O:</strong> 快速显示 OutLine</li>
<li><strong>Ctrl+T:</strong> 快速显示当前类的继承结构</li>
<li><strong>Ctrl+W:</strong> 关闭当前Editer</li>
<li><strong>Ctrl+K:</strong> 参照选中的Word快速定位到下一个</li>
<li><strong>Ctrl+E:</strong> 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)</li>
<li><strong>Ctrl+/(小键盘):</strong> 折叠当前类中的所有代码</li>
<li><strong>Ctrl+×(小键盘):</strong> 展开当前类中的所有代码</li>
<li><strong>Ctrl+Space:</strong> 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替)</li>
<li><strong>Ctrl+Shift+E:</strong> 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)</li>
<li><strong>Ctrl+J:</strong> 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了)</li>
<li><strong>Ctrl+Shift+J:</strong> 反向增量查找(和上条相同,只不过是从后往前查)</li>
<li><strong>Ctrl+Shift+F4:</strong> 关闭所有打开的Editer</li>
<li><strong>Ctrl+Shift+X:</strong> 把当前选中的文本全部变味小写</li>
<li><strong>Ctrl+Shift+Y:</strong> 把当前选中的文本全部变为小写</li>
<li><strong>Ctrl+Shift+F:</strong> 格式化当前代码</li>
<li><strong>Ctrl+Shift+P:</strong> 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)</li>
</ul>
<p>下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了)</p>
<ul>
<li><strong>Alt+Shift+R:</strong> 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力)</li>
<li><strong>Alt+Shift+M:</strong> 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)</li>
<li><strong>Alt+Shift+C:</strong> 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)</li>
<li><strong>Alt+Shift+L:</strong> 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)</li>
<li><strong>Alt+Shift+F:</strong> 把Class中的local变量变为field变量 (比较实用的功能)</li>
<li><strong>Alt+Shift+I:</strong> 合并变量(可能这样说有点不妥Inline)</li>
<li><strong>Alt+Shift+V:</strong> 移动函数和变量(不怎么常用)</li>
<li><strong>Alt+Shift+Z:</strong> 重构的后悔药(Undo)</li>
</ul>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
